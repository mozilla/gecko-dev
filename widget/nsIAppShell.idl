/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIRunnable;
%{ C++
template <class T> struct already_AddRefed;
%}

/**
 * Interface for the native event system layer.  This interface is designed
 * to be used on the main application thread only.
 */
[uuid(3d09973e-3975-4fd4-b103-276300cc8437)]
interface nsIAppShell : nsISupports
{
  /**
   * Enter an event loop.  Don't leave until exit() is called.
   */
  void run();

  /**
   * Exit the handle event loop
   */
  void exit();

  /**
   * Give hint to native event queue notification mechanism. If the native
   * platform needs to tradeoff performance vs. native event starvation this
   * hint tells the native dispatch code which to favor.  The default is to
   * prevent native event starvation.
   *
   * Calls to this function may be nested. When the number of calls that pass
   * PR_TRUE is subtracted from the number of calls that pass PR_FALSE is
   * greater than 0, performance is given precedence over preventing event
   * starvation.
   *
   * The starvationDelay arg is only used when favorPerfOverStarvation is
   * PR_FALSE. It is the amount of time in milliseconds to wait before the
   * PR_FALSE actually takes effect.
   */
  void favorPerformanceHint(in boolean favorPerfOverStarvation,
                            in unsigned long starvationDelay);

  /**
   * Suspends the use of additional platform-specific methods (besides the
   * nsIAppShell->run() event loop) to run Gecko events on the main
   * application thread.  Under some circumstances these "additional methods"
   * can cause Gecko event handlers to be re-entered, sometimes leading to
   * hangs and crashes.  Calls to suspendNative() and resumeNative() may be
   * nested.  On some platforms (those that don't use any "additional
   * methods") this will be a no-op.  Does not (in itself) stop Gecko events
   * from being processed on the main application thread.  But if the
   * nsIAppShell->run() event loop is blocked when this call is made, Gecko
   * events will stop being processed until resumeNative() is called (even
   * if a plugin or library is temporarily processing events on a nested
   * event loop).
   */
  void suspendNative();

  /**
   * Resumes the use of additional platform-specific methods to run Gecko
   * events on the main application thread.  Calls to suspendNative() and
   * resumeNative() may be nested.  On some platforms this will be a no-op.
   */
  void resumeNative();

  /**
   * The current event loop nesting level.
   */
  readonly attribute unsigned long eventloopNestingLevel;
  
%{ C++
  /**
   * Add a "synchronous section", in the form of an nsIRunnable run once the
   * event loop has reached a "stable state". |runnable| must not cause any
   * queued events to be processed (i.e. must not spin the event loop). We've
   * reached a stable state when the currently executing task/event has
   * finished, see:
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#synchronous-section
   * In practice this runs aRunnable once the currently executing event
   * finishes. If called multiple times per task/event, all the runnables will
   * be executed, in the order in which runInStableState() was called.
   */
  virtual void RunInStableState(already_AddRefed<nsIRunnable> runnable) = 0;
%}

  /**
   * Run the given runnable before the next iteration of the event loop (this
   * includes native events too). If a nested loop is spawned within the current
   * event then the runnable will not be run until that loop has terminated.
   */
  void runBeforeNextEvent(in nsIRunnable runnable);
};
