// GENERATED CODE
// Generated by the Java program at /build/annotationProcessors at compile time
// from annotations on Java methods. To update, change the annotations on the
// corresponding Javamethods and rerun the build. Manually updating this file
// will cause your build to fail.

#include "GeneratedJNIWrappers.h"
#include "mozilla/jni/Accessors.h"

namespace mozilla {
namespace widget {

constexpr char DownloadsIntegration::name[];

constexpr char DownloadsIntegration::ScanMedia_t::name[];
constexpr char DownloadsIntegration::ScanMedia_t::signature[];

void DownloadsIntegration::ScanMedia(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1)
{
    return mozilla::jni::Method<ScanMedia_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::name[];

constexpr char GeckoAppShell::AcknowledgeEvent_t::name[];
constexpr char GeckoAppShell::AcknowledgeEvent_t::signature[];

void GeckoAppShell::AcknowledgeEvent()
{
    return mozilla::jni::Method<AcknowledgeEvent_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::AddPluginViewWrapper_t::name[];
constexpr char GeckoAppShell::AddPluginViewWrapper_t::signature[];

void GeckoAppShell::AddPluginViewWrapper(mozilla::jni::Object::Param a0, float a1, float a2, float a3, float a4, bool a5)
{
    return mozilla::jni::Method<AddPluginViewWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4, a5);
}

constexpr char GeckoAppShell::AlertsProgressListener_OnProgress_t::name[];
constexpr char GeckoAppShell::AlertsProgressListener_OnProgress_t::signature[];

void GeckoAppShell::AlertsProgressListener_OnProgress(mozilla::jni::String::Param a0, int64_t a1, int64_t a2, mozilla::jni::String::Param a3)
{
    return mozilla::jni::Method<AlertsProgressListener_OnProgress_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::CancelVibrate_t::name[];
constexpr char GeckoAppShell::CancelVibrate_t::signature[];

void GeckoAppShell::CancelVibrate()
{
    return mozilla::jni::Method<CancelVibrate_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::CheckURIVisited_t::name[];
constexpr char GeckoAppShell::CheckURIVisited_t::signature[];

void GeckoAppShell::CheckURIVisited(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Method<CheckURIVisited_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::ClearMessageList_t::name[];
constexpr char GeckoAppShell::ClearMessageList_t::signature[];

void GeckoAppShell::ClearMessageList(int32_t a0)
{
    return mozilla::jni::Method<ClearMessageList_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::CloseCamera_t::name[];
constexpr char GeckoAppShell::CloseCamera_t::signature[];

void GeckoAppShell::CloseCamera()
{
    return mozilla::jni::Method<CloseCamera_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::CloseNotification_t::name[];
constexpr char GeckoAppShell::CloseNotification_t::signature[];

void GeckoAppShell::CloseNotification(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Method<CloseNotification_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::ConnectionGetMimeType_t::name[];
constexpr char GeckoAppShell::ConnectionGetMimeType_t::signature[];

mozilla::jni::String::LocalRef GeckoAppShell::ConnectionGetMimeType(mozilla::jni::Object::Param a0)
{
    return mozilla::jni::Method<ConnectionGetMimeType_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::CreateInputStream_t::name[];
constexpr char GeckoAppShell::CreateInputStream_t::signature[];

mozilla::jni::Object::LocalRef GeckoAppShell::CreateInputStream(mozilla::jni::Object::Param a0)
{
    return mozilla::jni::Method<CreateInputStream_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::CreateMessageListWrapper_t::name[];
constexpr char GeckoAppShell::CreateMessageListWrapper_t::signature[];

void GeckoAppShell::CreateMessageListWrapper(int64_t a0, int64_t a1, mozilla::jni::ObjectArray::Param a2, int32_t a3, mozilla::jni::String::Param a4, bool a5, bool a6, int64_t a7, bool a8, int32_t a9)
{
    return mozilla::jni::Method<CreateMessageListWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

constexpr char GeckoAppShell::CreateShortcut_t::name[];
constexpr char GeckoAppShell::CreateShortcut_t::signature[];

void GeckoAppShell::CreateShortcut(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2)
{
    return mozilla::jni::Method<CreateShortcut_t>::Call(nullptr, nullptr, a0, a1, a2);
}

constexpr char GeckoAppShell::DeleteMessageWrapper_t::name[];
constexpr char GeckoAppShell::DeleteMessageWrapper_t::signature[];

void GeckoAppShell::DeleteMessageWrapper(int32_t a0, int32_t a1)
{
    return mozilla::jni::Method<DeleteMessageWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::DisableBatteryNotifications_t::name[];
constexpr char GeckoAppShell::DisableBatteryNotifications_t::signature[];

void GeckoAppShell::DisableBatteryNotifications()
{
    return mozilla::jni::Method<DisableBatteryNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::DisableNetworkNotifications_t::name[];
constexpr char GeckoAppShell::DisableNetworkNotifications_t::signature[];

void GeckoAppShell::DisableNetworkNotifications()
{
    return mozilla::jni::Method<DisableNetworkNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::DisableScreenOrientationNotifications_t::name[];
constexpr char GeckoAppShell::DisableScreenOrientationNotifications_t::signature[];

void GeckoAppShell::DisableScreenOrientationNotifications()
{
    return mozilla::jni::Method<DisableScreenOrientationNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::DisableSensor_t::name[];
constexpr char GeckoAppShell::DisableSensor_t::signature[];

void GeckoAppShell::DisableSensor(int32_t a0)
{
    return mozilla::jni::Method<DisableSensor_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::EnableBatteryNotifications_t::name[];
constexpr char GeckoAppShell::EnableBatteryNotifications_t::signature[];

void GeckoAppShell::EnableBatteryNotifications()
{
    return mozilla::jni::Method<EnableBatteryNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::EnableLocation_t::name[];
constexpr char GeckoAppShell::EnableLocation_t::signature[];

void GeckoAppShell::EnableLocation(bool a0)
{
    return mozilla::jni::Method<EnableLocation_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::EnableLocationHighAccuracy_t::name[];
constexpr char GeckoAppShell::EnableLocationHighAccuracy_t::signature[];

void GeckoAppShell::EnableLocationHighAccuracy(bool a0)
{
    return mozilla::jni::Method<EnableLocationHighAccuracy_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::EnableNetworkNotifications_t::name[];
constexpr char GeckoAppShell::EnableNetworkNotifications_t::signature[];

void GeckoAppShell::EnableNetworkNotifications()
{
    return mozilla::jni::Method<EnableNetworkNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::EnableScreenOrientationNotifications_t::name[];
constexpr char GeckoAppShell::EnableScreenOrientationNotifications_t::signature[];

void GeckoAppShell::EnableScreenOrientationNotifications()
{
    return mozilla::jni::Method<EnableScreenOrientationNotifications_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::EnableSensor_t::name[];
constexpr char GeckoAppShell::EnableSensor_t::signature[];

void GeckoAppShell::EnableSensor(int32_t a0)
{
    return mozilla::jni::Method<EnableSensor_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GamepadAdded_t::name[];
constexpr char GeckoAppShell::GamepadAdded_t::signature[];

void GeckoAppShell::GamepadAdded(int32_t a0, int32_t a1)
{
    return mozilla::jni::Method<GamepadAdded_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetConnection_t::name[];
constexpr char GeckoAppShell::GetConnection_t::signature[];

mozilla::jni::Object::LocalRef GeckoAppShell::GetConnection(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Method<GetConnection_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GetContext_t::name[];
constexpr char GeckoAppShell::GetContext_t::signature[];

mozilla::jni::Object::LocalRef GeckoAppShell::GetContext()
{
    return mozilla::jni::Method<GetContext_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetCurrentBatteryInformationWrapper_t::name[];
constexpr char GeckoAppShell::GetCurrentBatteryInformationWrapper_t::signature[];

mozilla::jni::DoubleArray::LocalRef GeckoAppShell::GetCurrentBatteryInformationWrapper()
{
    return mozilla::jni::Method<GetCurrentBatteryInformationWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetCurrentNetworkInformationWrapper_t::name[];
constexpr char GeckoAppShell::GetCurrentNetworkInformationWrapper_t::signature[];

mozilla::jni::DoubleArray::LocalRef GeckoAppShell::GetCurrentNetworkInformationWrapper()
{
    return mozilla::jni::Method<GetCurrentNetworkInformationWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetDensity_t::name[];
constexpr char GeckoAppShell::GetDensity_t::signature[];

float GeckoAppShell::GetDensity()
{
    return mozilla::jni::Method<GetDensity_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetDpiWrapper_t::name[];
constexpr char GeckoAppShell::GetDpiWrapper_t::signature[];

int32_t GeckoAppShell::GetDpiWrapper()
{
    return mozilla::jni::Method<GetDpiWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetExtensionFromMimeTypeWrapper_t::name[];
constexpr char GeckoAppShell::GetExtensionFromMimeTypeWrapper_t::signature[];

mozilla::jni::String::LocalRef GeckoAppShell::GetExtensionFromMimeTypeWrapper(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Method<GetExtensionFromMimeTypeWrapper_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GetExternalPublicDirectory_t::name[];
constexpr char GeckoAppShell::GetExternalPublicDirectory_t::signature[];

mozilla::jni::String::LocalRef GeckoAppShell::GetExternalPublicDirectory(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Method<GetExternalPublicDirectory_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GetHandlersForMimeTypeWrapper_t::name[];
constexpr char GeckoAppShell::GetHandlersForMimeTypeWrapper_t::signature[];

mozilla::jni::ObjectArray::LocalRef GeckoAppShell::GetHandlersForMimeTypeWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1)
{
    return mozilla::jni::Method<GetHandlersForMimeTypeWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetHandlersForURLWrapper_t::name[];
constexpr char GeckoAppShell::GetHandlersForURLWrapper_t::signature[];

mozilla::jni::ObjectArray::LocalRef GeckoAppShell::GetHandlersForURLWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1)
{
    return mozilla::jni::Method<GetHandlersForURLWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetIconForExtensionWrapper_t::name[];
constexpr char GeckoAppShell::GetIconForExtensionWrapper_t::signature[];

mozilla::jni::ByteArray::LocalRef GeckoAppShell::GetIconForExtensionWrapper(mozilla::jni::String::Param a0, int32_t a1)
{
    return mozilla::jni::Method<GetIconForExtensionWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetMaxTouchPoints_t::name[];
constexpr char GeckoAppShell::GetMaxTouchPoints_t::signature[];

int32_t GeckoAppShell::GetMaxTouchPoints()
{
    return mozilla::jni::Method<GetMaxTouchPoints_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetMessageWrapper_t::name[];
constexpr char GeckoAppShell::GetMessageWrapper_t::signature[];

void GeckoAppShell::GetMessageWrapper(int32_t a0, int32_t a1)
{
    return mozilla::jni::Method<GetMessageWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetMimeTypeFromExtensionsWrapper_t::name[];
constexpr char GeckoAppShell::GetMimeTypeFromExtensionsWrapper_t::signature[];

mozilla::jni::String::LocalRef GeckoAppShell::GetMimeTypeFromExtensionsWrapper(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Method<GetMimeTypeFromExtensionsWrapper_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::GetNextMessageInListWrapper_t::name[];
constexpr char GeckoAppShell::GetNextMessageInListWrapper_t::signature[];

void GeckoAppShell::GetNextMessageInListWrapper(int32_t a0, int32_t a1)
{
    return mozilla::jni::Method<GetNextMessageInListWrapper_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::GetProxyForURIWrapper_t::name[];
constexpr char GeckoAppShell::GetProxyForURIWrapper_t::signature[];

mozilla::jni::String::LocalRef GeckoAppShell::GetProxyForURIWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, int32_t a3)
{
    return mozilla::jni::Method<GetProxyForURIWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::GetScreenDepthWrapper_t::name[];
constexpr char GeckoAppShell::GetScreenDepthWrapper_t::signature[];

int32_t GeckoAppShell::GetScreenDepthWrapper()
{
    return mozilla::jni::Method<GetScreenDepthWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetScreenOrientationWrapper_t::name[];
constexpr char GeckoAppShell::GetScreenOrientationWrapper_t::signature[];

int16_t GeckoAppShell::GetScreenOrientationWrapper()
{
    return mozilla::jni::Method<GetScreenOrientationWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetShowPasswordSetting_t::name[];
constexpr char GeckoAppShell::GetShowPasswordSetting_t::signature[];

bool GeckoAppShell::GetShowPasswordSetting()
{
    return mozilla::jni::Method<GetShowPasswordSetting_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::GetSystemColoursWrapper_t::name[];
constexpr char GeckoAppShell::GetSystemColoursWrapper_t::signature[];

mozilla::jni::IntArray::LocalRef GeckoAppShell::GetSystemColoursWrapper()
{
    return mozilla::jni::Method<GetSystemColoursWrapper_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::HandleGeckoMessageWrapper_t::name[];
constexpr char GeckoAppShell::HandleGeckoMessageWrapper_t::signature[];

void GeckoAppShell::HandleGeckoMessageWrapper(mozilla::jni::Object::Param a0)
{
    return mozilla::jni::Method<HandleGeckoMessageWrapper_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::HandleUncaughtException_t::name[];
constexpr char GeckoAppShell::HandleUncaughtException_t::signature[];

void GeckoAppShell::HandleUncaughtException(mozilla::jni::Object::Param a0, mozilla::jni::Throwable::Param a1)
{
    return mozilla::jni::Method<HandleUncaughtException_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::HideProgressDialog_t::name[];
constexpr char GeckoAppShell::HideProgressDialog_t::signature[];

void GeckoAppShell::HideProgressDialog()
{
    return mozilla::jni::Method<HideProgressDialog_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::InitCameraWrapper_t::name[];
constexpr char GeckoAppShell::InitCameraWrapper_t::signature[];

mozilla::jni::IntArray::LocalRef GeckoAppShell::InitCameraWrapper(mozilla::jni::String::Param a0, int32_t a1, int32_t a2, int32_t a3)
{
    return mozilla::jni::Method<InitCameraWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::IsNetworkLinkKnown_t::name[];
constexpr char GeckoAppShell::IsNetworkLinkKnown_t::signature[];

bool GeckoAppShell::IsNetworkLinkKnown()
{
    return mozilla::jni::Method<IsNetworkLinkKnown_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::IsNetworkLinkUp_t::name[];
constexpr char GeckoAppShell::IsNetworkLinkUp_t::signature[];

bool GeckoAppShell::IsNetworkLinkUp()
{
    return mozilla::jni::Method<IsNetworkLinkUp_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::IsTablet_t::name[];
constexpr char GeckoAppShell::IsTablet_t::signature[];

bool GeckoAppShell::IsTablet()
{
    return mozilla::jni::Method<IsTablet_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::KillAnyZombies_t::name[];
constexpr char GeckoAppShell::KillAnyZombies_t::signature[];

void GeckoAppShell::KillAnyZombies()
{
    return mozilla::jni::Method<KillAnyZombies_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::LoadPluginClass_t::name[];
constexpr char GeckoAppShell::LoadPluginClass_t::signature[];

mozilla::jni::ClassObject::LocalRef GeckoAppShell::LoadPluginClass(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1)
{
    return mozilla::jni::Method<LoadPluginClass_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::LockScreenOrientation_t::name[];
constexpr char GeckoAppShell::LockScreenOrientation_t::signature[];

void GeckoAppShell::LockScreenOrientation(int32_t a0)
{
    return mozilla::jni::Method<LockScreenOrientation_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::MarkURIVisited_t::name[];
constexpr char GeckoAppShell::MarkURIVisited_t::signature[];

void GeckoAppShell::MarkURIVisited(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Method<MarkURIVisited_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::MoveTaskToBack_t::name[];
constexpr char GeckoAppShell::MoveTaskToBack_t::signature[];

void GeckoAppShell::MoveTaskToBack()
{
    return mozilla::jni::Method<MoveTaskToBack_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::NetworkLinkType_t::name[];
constexpr char GeckoAppShell::NetworkLinkType_t::signature[];

int32_t GeckoAppShell::NetworkLinkType()
{
    return mozilla::jni::Method<NetworkLinkType_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::NotifyDefaultPrevented_t::name[];
constexpr char GeckoAppShell::NotifyDefaultPrevented_t::signature[];

void GeckoAppShell::NotifyDefaultPrevented(bool a0)
{
    return mozilla::jni::Method<NotifyDefaultPrevented_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::NotifyIME_t::name[];
constexpr char GeckoAppShell::NotifyIME_t::signature[];

void GeckoAppShell::NotifyIME(int32_t a0)
{
    return mozilla::jni::Method<NotifyIME_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::NotifyIMEChange_t::name[];
constexpr char GeckoAppShell::NotifyIMEChange_t::signature[];

void GeckoAppShell::NotifyIMEChange(mozilla::jni::String::Param a0, int32_t a1, int32_t a2, int32_t a3)
{
    return mozilla::jni::Method<NotifyIMEChange_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::NotifyIMEContext_t::name[];
constexpr char GeckoAppShell::NotifyIMEContext_t::signature[];

void GeckoAppShell::NotifyIMEContext(int32_t a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3)
{
    return mozilla::jni::Method<NotifyIMEContext_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoAppShell::NotifyWakeLockChanged_t::name[];
constexpr char GeckoAppShell::NotifyWakeLockChanged_t::signature[];

void GeckoAppShell::NotifyWakeLockChanged(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1)
{
    return mozilla::jni::Method<NotifyWakeLockChanged_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::OpenUriExternal_t::name[];
constexpr char GeckoAppShell::OpenUriExternal_t::signature[];

bool GeckoAppShell::OpenUriExternal(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3, mozilla::jni::String::Param a4, mozilla::jni::String::Param a5)
{
    return mozilla::jni::Method<OpenUriExternal_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4, a5);
}

constexpr char GeckoAppShell::PerformHapticFeedback_t::name[];
constexpr char GeckoAppShell::PerformHapticFeedback_t::signature[];

void GeckoAppShell::PerformHapticFeedback(bool a0)
{
    return mozilla::jni::Method<PerformHapticFeedback_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::PumpMessageLoop_t::name[];
constexpr char GeckoAppShell::PumpMessageLoop_t::signature[];

bool GeckoAppShell::PumpMessageLoop(mozilla::jni::Object::Param a0)
{
    return mozilla::jni::Method<PumpMessageLoop_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::RegisterSurfaceTextureFrameListener_t::name[];
constexpr char GeckoAppShell::RegisterSurfaceTextureFrameListener_t::signature[];

void GeckoAppShell::RegisterSurfaceTextureFrameListener(mozilla::jni::Object::Param a0, int32_t a1)
{
    return mozilla::jni::Method<RegisterSurfaceTextureFrameListener_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::RemovePluginView_t::name[];
constexpr char GeckoAppShell::RemovePluginView_t::signature[];

void GeckoAppShell::RemovePluginView(mozilla::jni::Object::Param a0, bool a1)
{
    return mozilla::jni::Method<RemovePluginView_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::RequestUiThreadCallback_t::name[];
constexpr char GeckoAppShell::RequestUiThreadCallback_t::signature[];

void GeckoAppShell::RequestUiThreadCallback(int64_t a0)
{
    return mozilla::jni::Method<RequestUiThreadCallback_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::ScheduleRestart_t::name[];
constexpr char GeckoAppShell::ScheduleRestart_t::signature[];

void GeckoAppShell::ScheduleRestart()
{
    return mozilla::jni::Method<ScheduleRestart_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::SendMessageWrapper_t::name[];
constexpr char GeckoAppShell::SendMessageWrapper_t::signature[];

void GeckoAppShell::SendMessageWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, int32_t a2)
{
    return mozilla::jni::Method<SendMessageWrapper_t>::Call(nullptr, nullptr, a0, a1, a2);
}

constexpr char GeckoAppShell::SetFullScreen_t::name[];
constexpr char GeckoAppShell::SetFullScreen_t::signature[];

void GeckoAppShell::SetFullScreen(bool a0)
{
    return mozilla::jni::Method<SetFullScreen_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::SetKeepScreenOn_t::name[];
constexpr char GeckoAppShell::SetKeepScreenOn_t::signature[];

void GeckoAppShell::SetKeepScreenOn(bool a0)
{
    return mozilla::jni::Method<SetKeepScreenOn_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::SetURITitle_t::name[];
constexpr char GeckoAppShell::SetURITitle_t::signature[];

void GeckoAppShell::SetURITitle(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1)
{
    return mozilla::jni::Method<SetURITitle_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoAppShell::ShowAlertNotificationWrapper_t::name[];
constexpr char GeckoAppShell::ShowAlertNotificationWrapper_t::signature[];

void GeckoAppShell::ShowAlertNotificationWrapper(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3, mozilla::jni::String::Param a4)
{
    return mozilla::jni::Method<ShowAlertNotificationWrapper_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4);
}

constexpr char GeckoAppShell::ShowInputMethodPicker_t::name[];
constexpr char GeckoAppShell::ShowInputMethodPicker_t::signature[];

void GeckoAppShell::ShowInputMethodPicker()
{
    return mozilla::jni::Method<ShowInputMethodPicker_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::StartMonitoringGamepad_t::name[];
constexpr char GeckoAppShell::StartMonitoringGamepad_t::signature[];

void GeckoAppShell::StartMonitoringGamepad()
{
    return mozilla::jni::Method<StartMonitoringGamepad_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::StopMonitoringGamepad_t::name[];
constexpr char GeckoAppShell::StopMonitoringGamepad_t::signature[];

void GeckoAppShell::StopMonitoringGamepad()
{
    return mozilla::jni::Method<StopMonitoringGamepad_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::UnlockProfile_t::name[];
constexpr char GeckoAppShell::UnlockProfile_t::signature[];

bool GeckoAppShell::UnlockProfile()
{
    return mozilla::jni::Method<UnlockProfile_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::UnlockScreenOrientation_t::name[];
constexpr char GeckoAppShell::UnlockScreenOrientation_t::signature[];

void GeckoAppShell::UnlockScreenOrientation()
{
    return mozilla::jni::Method<UnlockScreenOrientation_t>::Call(nullptr, nullptr);
}

constexpr char GeckoAppShell::UnregisterSurfaceTextureFrameListener_t::name[];
constexpr char GeckoAppShell::UnregisterSurfaceTextureFrameListener_t::signature[];

void GeckoAppShell::UnregisterSurfaceTextureFrameListener(mozilla::jni::Object::Param a0)
{
    return mozilla::jni::Method<UnregisterSurfaceTextureFrameListener_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::Vibrate1_t::name[];
constexpr char GeckoAppShell::Vibrate1_t::signature[];

void GeckoAppShell::Vibrate1(int64_t a0)
{
    return mozilla::jni::Method<Vibrate1_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoAppShell::VibrateA_t::name[];
constexpr char GeckoAppShell::VibrateA_t::signature[];

void GeckoAppShell::VibrateA(mozilla::jni::LongArray::Param a0, int32_t a1)
{
    return mozilla::jni::Method<VibrateA_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoJavaSampler::name[];

constexpr char GeckoJavaSampler::GetFrameNameJavaProfilingWrapper_t::name[];
constexpr char GeckoJavaSampler::GetFrameNameJavaProfilingWrapper_t::signature[];

mozilla::jni::String::LocalRef GeckoJavaSampler::GetFrameNameJavaProfilingWrapper(int32_t a0, int32_t a1, int32_t a2)
{
    return mozilla::jni::Method<GetFrameNameJavaProfilingWrapper_t>::Call(nullptr, nullptr, a0, a1, a2);
}

constexpr char GeckoJavaSampler::GetSampleTimeJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::GetSampleTimeJavaProfiling_t::signature[];

double GeckoJavaSampler::GetSampleTimeJavaProfiling(int32_t a0, int32_t a1)
{
    return mozilla::jni::Method<GetSampleTimeJavaProfiling_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoJavaSampler::GetThreadNameJavaProfilingWrapper_t::name[];
constexpr char GeckoJavaSampler::GetThreadNameJavaProfilingWrapper_t::signature[];

mozilla::jni::String::LocalRef GeckoJavaSampler::GetThreadNameJavaProfilingWrapper(int32_t a0)
{
    return mozilla::jni::Method<GetThreadNameJavaProfilingWrapper_t>::Call(nullptr, nullptr, a0);
}

constexpr char GeckoJavaSampler::PauseJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::PauseJavaProfiling_t::signature[];

void GeckoJavaSampler::PauseJavaProfiling()
{
    return mozilla::jni::Method<PauseJavaProfiling_t>::Call(nullptr, nullptr);
}

constexpr char GeckoJavaSampler::StartJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::StartJavaProfiling_t::signature[];

void GeckoJavaSampler::StartJavaProfiling(int32_t a0, int32_t a1)
{
    return mozilla::jni::Method<StartJavaProfiling_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char GeckoJavaSampler::StopJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::StopJavaProfiling_t::signature[];

void GeckoJavaSampler::StopJavaProfiling()
{
    return mozilla::jni::Method<StopJavaProfiling_t>::Call(nullptr, nullptr);
}

constexpr char GeckoJavaSampler::UnpauseJavaProfiling_t::name[];
constexpr char GeckoJavaSampler::UnpauseJavaProfiling_t::signature[];

void GeckoJavaSampler::UnpauseJavaProfiling()
{
    return mozilla::jni::Method<UnpauseJavaProfiling_t>::Call(nullptr, nullptr);
}

constexpr char RestrictedProfiles::name[];

constexpr char RestrictedProfiles::GetUserRestrictions_t::name[];
constexpr char RestrictedProfiles::GetUserRestrictions_t::signature[];

mozilla::jni::String::LocalRef RestrictedProfiles::GetUserRestrictions()
{
    return mozilla::jni::Method<GetUserRestrictions_t>::Call(nullptr, nullptr);
}

constexpr char RestrictedProfiles::IsAllowed_t::name[];
constexpr char RestrictedProfiles::IsAllowed_t::signature[];

bool RestrictedProfiles::IsAllowed(int32_t a0, mozilla::jni::String::Param a1)
{
    return mozilla::jni::Method<IsAllowed_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char RestrictedProfiles::IsUserRestricted_t::name[];
constexpr char RestrictedProfiles::IsUserRestricted_t::signature[];

bool RestrictedProfiles::IsUserRestricted()
{
    return mozilla::jni::Method<IsUserRestricted_t>::Call(nullptr, nullptr);
}

constexpr char SurfaceBits::name[];

constexpr char SurfaceBits::New_t::name[];
constexpr char SurfaceBits::New_t::signature[];

SurfaceBits::LocalRef SurfaceBits::New()
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr);
}

constexpr char SurfaceBits::Buffer_t::name[];
constexpr char SurfaceBits::Buffer_t::signature[];

mozilla::jni::Object::LocalRef SurfaceBits::Buffer() const
{
    return mozilla::jni::Field<Buffer_t>::Get(this, nullptr);
}

void SurfaceBits::Buffer(mozilla::jni::Object::Param a0) const
{
    return mozilla::jni::Field<Buffer_t>::Set(this, nullptr, a0);
}

constexpr char SurfaceBits::Format_t::name[];
constexpr char SurfaceBits::Format_t::signature[];

int32_t SurfaceBits::Format() const
{
    return mozilla::jni::Field<Format_t>::Get(this, nullptr);
}

void SurfaceBits::Format(int32_t a0) const
{
    return mozilla::jni::Field<Format_t>::Set(this, nullptr, a0);
}

constexpr char SurfaceBits::Height_t::name[];
constexpr char SurfaceBits::Height_t::signature[];

int32_t SurfaceBits::Height() const
{
    return mozilla::jni::Field<Height_t>::Get(this, nullptr);
}

void SurfaceBits::Height(int32_t a0) const
{
    return mozilla::jni::Field<Height_t>::Set(this, nullptr, a0);
}

constexpr char SurfaceBits::Width_t::name[];
constexpr char SurfaceBits::Width_t::signature[];

int32_t SurfaceBits::Width() const
{
    return mozilla::jni::Field<Width_t>::Get(this, nullptr);
}

void SurfaceBits::Width(int32_t a0) const
{
    return mozilla::jni::Field<Width_t>::Set(this, nullptr, a0);
}

constexpr char ThumbnailHelper::name[];

constexpr char ThumbnailHelper::SendThumbnail_t::name[];
constexpr char ThumbnailHelper::SendThumbnail_t::signature[];

void ThumbnailHelper::SendThumbnail(mozilla::jni::Object::Param a0, int32_t a1, bool a2, bool a3)
{
    return mozilla::jni::Method<SendThumbnail_t>::Call(nullptr, nullptr, a0, a1, a2, a3);
}

constexpr char DisplayPortMetrics::name[];

constexpr char DisplayPortMetrics::New_t::name[];
constexpr char DisplayPortMetrics::New_t::signature[];

DisplayPortMetrics::LocalRef DisplayPortMetrics::New(float a0, float a1, float a2, float a3, float a4)
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4);
}

constexpr char DisplayPortMetrics::MPosition_t::name[];
constexpr char DisplayPortMetrics::MPosition_t::signature[];

mozilla::jni::Object::LocalRef DisplayPortMetrics::MPosition() const
{
    return mozilla::jni::Field<MPosition_t>::Get(this, nullptr);
}

constexpr char DisplayPortMetrics::Resolution_t::name[];
constexpr char DisplayPortMetrics::Resolution_t::signature[];

float DisplayPortMetrics::Resolution() const
{
    return mozilla::jni::Field<Resolution_t>::Get(this, nullptr);
}

constexpr char GLController::name[];

constexpr char GLController::CreateEGLSurfaceForCompositorWrapper_t::name[];
constexpr char GLController::CreateEGLSurfaceForCompositorWrapper_t::signature[];

mozilla::jni::Object::LocalRef GLController::CreateEGLSurfaceForCompositorWrapper() const
{
    return mozilla::jni::Method<CreateEGLSurfaceForCompositorWrapper_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::name[];

constexpr char GeckoLayerClient::ActivateProgram_t::name[];
constexpr char GeckoLayerClient::ActivateProgram_t::signature[];

void GeckoLayerClient::ActivateProgram() const
{
    return mozilla::jni::Method<ActivateProgram_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::ContentDocumentChanged_t::name[];
constexpr char GeckoLayerClient::ContentDocumentChanged_t::signature[];

void GeckoLayerClient::ContentDocumentChanged() const
{
    return mozilla::jni::Method<ContentDocumentChanged_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::CreateFrame_t::name[];
constexpr char GeckoLayerClient::CreateFrame_t::signature[];

mozilla::jni::Object::LocalRef GeckoLayerClient::CreateFrame() const
{
    return mozilla::jni::Method<CreateFrame_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::DeactivateProgramAndRestoreState_t::name[];
constexpr char GeckoLayerClient::DeactivateProgramAndRestoreState_t::signature[];

void GeckoLayerClient::DeactivateProgramAndRestoreState(bool a0, int32_t a1, int32_t a2, int32_t a3, int32_t a4) const
{
    return mozilla::jni::Method<DeactivateProgramAndRestoreState_t>::Call(this, nullptr, a0, a1, a2, a3, a4);
}

constexpr char GeckoLayerClient::GetDisplayPort_t::name[];
constexpr char GeckoLayerClient::GetDisplayPort_t::signature[];

mozilla::jni::Object::LocalRef GeckoLayerClient::GetDisplayPort(bool a0, bool a1, int32_t a2, mozilla::jni::Object::Param a3) const
{
    return mozilla::jni::Method<GetDisplayPort_t>::Call(this, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoLayerClient::IsContentDocumentDisplayed_t::name[];
constexpr char GeckoLayerClient::IsContentDocumentDisplayed_t::signature[];

bool GeckoLayerClient::IsContentDocumentDisplayed() const
{
    return mozilla::jni::Method<IsContentDocumentDisplayed_t>::Call(this, nullptr);
}

constexpr char GeckoLayerClient::ProgressiveUpdateCallback_t::name[];
constexpr char GeckoLayerClient::ProgressiveUpdateCallback_t::signature[];

mozilla::jni::Object::LocalRef GeckoLayerClient::ProgressiveUpdateCallback(bool a0, float a1, float a2, float a3, float a4, float a5, bool a6) const
{
    return mozilla::jni::Method<ProgressiveUpdateCallback_t>::Call(this, nullptr, a0, a1, a2, a3, a4, a5, a6);
}

constexpr char GeckoLayerClient::SetFirstPaintViewport_t::name[];
constexpr char GeckoLayerClient::SetFirstPaintViewport_t::signature[];

void GeckoLayerClient::SetFirstPaintViewport(float a0, float a1, float a2, float a3, float a4, float a5, float a6) const
{
    return mozilla::jni::Method<SetFirstPaintViewport_t>::Call(this, nullptr, a0, a1, a2, a3, a4, a5, a6);
}

constexpr char GeckoLayerClient::SetPageRect_t::name[];
constexpr char GeckoLayerClient::SetPageRect_t::signature[];

void GeckoLayerClient::SetPageRect(float a0, float a1, float a2, float a3) const
{
    return mozilla::jni::Method<SetPageRect_t>::Call(this, nullptr, a0, a1, a2, a3);
}

constexpr char GeckoLayerClient::SyncFrameMetrics_t::name[];
constexpr char GeckoLayerClient::SyncFrameMetrics_t::signature[];

mozilla::jni::Object::LocalRef GeckoLayerClient::SyncFrameMetrics(float a0, float a1, float a2, float a3, float a4, float a5, float a6, bool a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, float a12, bool a13) const
{
    return mozilla::jni::Method<SyncFrameMetrics_t>::Call(this, nullptr, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

constexpr char GeckoLayerClient::SyncViewportInfo_t::name[];
constexpr char GeckoLayerClient::SyncViewportInfo_t::signature[];

mozilla::jni::Object::LocalRef GeckoLayerClient::SyncViewportInfo(int32_t a0, int32_t a1, int32_t a2, int32_t a3, float a4, bool a5) const
{
    return mozilla::jni::Method<SyncViewportInfo_t>::Call(this, nullptr, a0, a1, a2, a3, a4, a5);
}

constexpr char ImmutableViewportMetrics::name[];

constexpr char ImmutableViewportMetrics::New_t::name[];
constexpr char ImmutableViewportMetrics::New_t::signature[];

ImmutableViewportMetrics::LocalRef ImmutableViewportMetrics::New(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

constexpr char LayerView::name[];

constexpr char LayerView::RegisterCompositorWrapper_t::name[];
constexpr char LayerView::RegisterCompositorWrapper_t::signature[];

mozilla::jni::Object::LocalRef LayerView::RegisterCompositorWrapper()
{
    return mozilla::jni::Method<RegisterCompositorWrapper_t>::Call(nullptr, nullptr);
}

constexpr char LayerView::updateZoomedView_t::name[];
constexpr char LayerView::updateZoomedView_t::signature[];

void LayerView::updateZoomedView(mozilla::jni::Object::Param a0)
{
    return mozilla::jni::Method<updateZoomedView_t>::Call(nullptr, nullptr, a0);
}

constexpr char NativePanZoomController::name[];

constexpr char NativePanZoomController::RequestContentRepaintWrapper_t::name[];
constexpr char NativePanZoomController::RequestContentRepaintWrapper_t::signature[];

void NativePanZoomController::RequestContentRepaintWrapper(float a0, float a1, float a2, float a3, float a4) const
{
    return mozilla::jni::Method<RequestContentRepaintWrapper_t>::Call(this, nullptr, a0, a1, a2, a3, a4);
}

constexpr char ProgressiveUpdateData::name[];

constexpr char ProgressiveUpdateData::New_t::name[];
constexpr char ProgressiveUpdateData::New_t::signature[];

ProgressiveUpdateData::LocalRef ProgressiveUpdateData::New()
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr);
}

constexpr char ProgressiveUpdateData::SetViewport_t::name[];
constexpr char ProgressiveUpdateData::SetViewport_t::signature[];

void ProgressiveUpdateData::SetViewport(mozilla::jni::Object::Param a0) const
{
    return mozilla::jni::Method<SetViewport_t>::Call(this, nullptr, a0);
}

constexpr char ProgressiveUpdateData::Abort_t::name[];
constexpr char ProgressiveUpdateData::Abort_t::signature[];

bool ProgressiveUpdateData::Abort() const
{
    return mozilla::jni::Field<Abort_t>::Get(this, nullptr);
}

void ProgressiveUpdateData::Abort(bool a0) const
{
    return mozilla::jni::Field<Abort_t>::Set(this, nullptr, a0);
}

constexpr char ProgressiveUpdateData::Scale_t::name[];
constexpr char ProgressiveUpdateData::Scale_t::signature[];

float ProgressiveUpdateData::Scale() const
{
    return mozilla::jni::Field<Scale_t>::Get(this, nullptr);
}

void ProgressiveUpdateData::Scale(float a0) const
{
    return mozilla::jni::Field<Scale_t>::Set(this, nullptr, a0);
}

constexpr char ProgressiveUpdateData::X_t::name[];
constexpr char ProgressiveUpdateData::X_t::signature[];

float ProgressiveUpdateData::X() const
{
    return mozilla::jni::Field<X_t>::Get(this, nullptr);
}

void ProgressiveUpdateData::X(float a0) const
{
    return mozilla::jni::Field<X_t>::Set(this, nullptr, a0);
}

constexpr char ProgressiveUpdateData::Y_t::name[];
constexpr char ProgressiveUpdateData::Y_t::signature[];

float ProgressiveUpdateData::Y() const
{
    return mozilla::jni::Field<Y_t>::Get(this, nullptr);
}

void ProgressiveUpdateData::Y(float a0) const
{
    return mozilla::jni::Field<Y_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::name[];

constexpr char ViewTransform::New_t::name[];
constexpr char ViewTransform::New_t::signature[];

ViewTransform::LocalRef ViewTransform::New(float a0, float a1, float a2)
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0, a1, a2);
}

constexpr char ViewTransform::FixedLayerMarginBottom_t::name[];
constexpr char ViewTransform::FixedLayerMarginBottom_t::signature[];

float ViewTransform::FixedLayerMarginBottom() const
{
    return mozilla::jni::Field<FixedLayerMarginBottom_t>::Get(this, nullptr);
}

void ViewTransform::FixedLayerMarginBottom(float a0) const
{
    return mozilla::jni::Field<FixedLayerMarginBottom_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginLeft_t::name[];
constexpr char ViewTransform::FixedLayerMarginLeft_t::signature[];

float ViewTransform::FixedLayerMarginLeft() const
{
    return mozilla::jni::Field<FixedLayerMarginLeft_t>::Get(this, nullptr);
}

void ViewTransform::FixedLayerMarginLeft(float a0) const
{
    return mozilla::jni::Field<FixedLayerMarginLeft_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginRight_t::name[];
constexpr char ViewTransform::FixedLayerMarginRight_t::signature[];

float ViewTransform::FixedLayerMarginRight() const
{
    return mozilla::jni::Field<FixedLayerMarginRight_t>::Get(this, nullptr);
}

void ViewTransform::FixedLayerMarginRight(float a0) const
{
    return mozilla::jni::Field<FixedLayerMarginRight_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginTop_t::name[];
constexpr char ViewTransform::FixedLayerMarginTop_t::signature[];

float ViewTransform::FixedLayerMarginTop() const
{
    return mozilla::jni::Field<FixedLayerMarginTop_t>::Get(this, nullptr);
}

void ViewTransform::FixedLayerMarginTop(float a0) const
{
    return mozilla::jni::Field<FixedLayerMarginTop_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::OffsetX_t::name[];
constexpr char ViewTransform::OffsetX_t::signature[];

float ViewTransform::OffsetX() const
{
    return mozilla::jni::Field<OffsetX_t>::Get(this, nullptr);
}

void ViewTransform::OffsetX(float a0) const
{
    return mozilla::jni::Field<OffsetX_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::OffsetY_t::name[];
constexpr char ViewTransform::OffsetY_t::signature[];

float ViewTransform::OffsetY() const
{
    return mozilla::jni::Field<OffsetY_t>::Get(this, nullptr);
}

void ViewTransform::OffsetY(float a0) const
{
    return mozilla::jni::Field<OffsetY_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::Scale_t::name[];
constexpr char ViewTransform::Scale_t::signature[];

float ViewTransform::Scale() const
{
    return mozilla::jni::Field<Scale_t>::Get(this, nullptr);
}

void ViewTransform::Scale(float a0) const
{
    return mozilla::jni::Field<Scale_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::X_t::name[];
constexpr char ViewTransform::X_t::signature[];

float ViewTransform::X() const
{
    return mozilla::jni::Field<X_t>::Get(this, nullptr);
}

void ViewTransform::X(float a0) const
{
    return mozilla::jni::Field<X_t>::Set(this, nullptr, a0);
}

constexpr char ViewTransform::Y_t::name[];
constexpr char ViewTransform::Y_t::signature[];

float ViewTransform::Y() const
{
    return mozilla::jni::Field<Y_t>::Get(this, nullptr);
}

void ViewTransform::Y(float a0) const
{
    return mozilla::jni::Field<Y_t>::Set(this, nullptr, a0);
}

constexpr char NativeZip::name[];

constexpr char NativeZip::CreateInputStream_t::name[];
constexpr char NativeZip::CreateInputStream_t::signature[];

mozilla::jni::Object::LocalRef NativeZip::CreateInputStream(mozilla::jni::Object::Param a0, int32_t a1) const
{
    return mozilla::jni::Method<CreateInputStream_t>::Call(this, nullptr, a0, a1);
}

constexpr char MatrixBlobCursor::name[];

constexpr char MatrixBlobCursor::New_t::name[];
constexpr char MatrixBlobCursor::New_t::signature[];

MatrixBlobCursor::LocalRef MatrixBlobCursor::New(mozilla::jni::ObjectArray::Param a0)
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr, a0);
}

constexpr char MatrixBlobCursor::New2_t::name[];
constexpr char MatrixBlobCursor::New2_t::signature[];

MatrixBlobCursor::LocalRef MatrixBlobCursor::New(mozilla::jni::ObjectArray::Param a0, int32_t a1)
{
    return mozilla::jni::Constructor<New2_t>::Call(nullptr, nullptr, a0, a1);
}

constexpr char MatrixBlobCursor::AddRow_t::name[];
constexpr char MatrixBlobCursor::AddRow_t::signature[];

void MatrixBlobCursor::AddRow(mozilla::jni::Object::Param a0) const
{
    return mozilla::jni::Method<AddRow_t>::Call(this, nullptr, a0);
}

constexpr char MatrixBlobCursor::AddRow2_t::name[];
constexpr char MatrixBlobCursor::AddRow2_t::signature[];

void MatrixBlobCursor::AddRow(mozilla::jni::Object::Param a0, int32_t a1) const
{
    return mozilla::jni::Method<AddRow2_t>::Call(this, nullptr, a0, a1);
}

constexpr char MatrixBlobCursor::AddRow3_t::name[];
constexpr char MatrixBlobCursor::AddRow3_t::signature[];

void MatrixBlobCursor::AddRow(mozilla::jni::ObjectArray::Param a0) const
{
    return mozilla::jni::Method<AddRow3_t>::Call(this, nullptr, a0);
}

constexpr char SQLiteBridgeException::name[];

constexpr char SQLiteBridgeException::New_t::name[];
constexpr char SQLiteBridgeException::New_t::signature[];

SQLiteBridgeException::LocalRef SQLiteBridgeException::New()
{
    return mozilla::jni::Constructor<New_t>::Call(nullptr, nullptr);
}

constexpr char SQLiteBridgeException::New2_t::name[];
constexpr char SQLiteBridgeException::New2_t::signature[];

SQLiteBridgeException::LocalRef SQLiteBridgeException::New(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Constructor<New2_t>::Call(nullptr, nullptr, a0);
}

constexpr char SQLiteBridgeException::SerialVersionUID_t::name[];
constexpr char SQLiteBridgeException::SerialVersionUID_t::signature[];

int64_t SQLiteBridgeException::SerialVersionUID()
{
    return mozilla::jni::Field<SerialVersionUID_t>::Get(nullptr, nullptr);
}

constexpr char Clipboard::name[];

constexpr char Clipboard::ClearText_t::name[];
constexpr char Clipboard::ClearText_t::signature[];

void Clipboard::ClearText()
{
    return mozilla::jni::Method<ClearText_t>::Call(nullptr, nullptr);
}

constexpr char Clipboard::GetClipboardTextWrapper_t::name[];
constexpr char Clipboard::GetClipboardTextWrapper_t::signature[];

mozilla::jni::String::LocalRef Clipboard::GetClipboardTextWrapper()
{
    return mozilla::jni::Method<GetClipboardTextWrapper_t>::Call(nullptr, nullptr);
}

constexpr char Clipboard::HasText_t::name[];
constexpr char Clipboard::HasText_t::signature[];

bool Clipboard::HasText()
{
    return mozilla::jni::Method<HasText_t>::Call(nullptr, nullptr);
}

constexpr char Clipboard::SetClipboardText_t::name[];
constexpr char Clipboard::SetClipboardText_t::signature[];

void Clipboard::SetClipboardText(mozilla::jni::String::Param a0)
{
    return mozilla::jni::Method<SetClipboardText_t>::Call(nullptr, nullptr, a0);
}


} /* widget */
} /* mozilla */
