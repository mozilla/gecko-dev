// GENERATED CODE
// Generated by the Java program at /build/annotationProcessors at compile time
// from annotations on Java methods. To update, change the annotations on the
// corresponding Javamethods and rerun the build. Manually updating this file
// will cause your build to fail.

#ifndef GeneratedJNIWrappers_h__
#define GeneratedJNIWrappers_h__

#include "mozilla/jni/Refs.h"

namespace mozilla {
namespace widget {

class DownloadsIntegration : public mozilla::jni::Class<DownloadsIntegration> {

public:
    typedef mozilla::jni::Ref<DownloadsIntegration> Ref;
    typedef mozilla::jni::LocalRef<DownloadsIntegration> LocalRef;
    typedef mozilla::jni::GlobalRef<DownloadsIntegration> GlobalRef;
    typedef const typename mozilla::jni::Param<DownloadsIntegration>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/DownloadsIntegration";

protected:
    DownloadsIntegration(jobject instance) : Class(instance) {}

public:
    struct ScanMedia_t {
        typedef DownloadsIntegration Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "scanMedia";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void ScanMedia(mozilla::jni::String::Param, mozilla::jni::String::Param);

};

class GeckoAppShell : public mozilla::jni::Class<GeckoAppShell> {

public:
    typedef mozilla::jni::Ref<GeckoAppShell> Ref;
    typedef mozilla::jni::LocalRef<GeckoAppShell> LocalRef;
    typedef mozilla::jni::GlobalRef<GeckoAppShell> GlobalRef;
    typedef const typename mozilla::jni::Param<GeckoAppShell>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/GeckoAppShell";

protected:
    GeckoAppShell(jobject instance) : Class(instance) {}

public:
    struct AcknowledgeEvent_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "acknowledgeEvent";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void AcknowledgeEvent();

public:
    struct AddPluginViewWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "addPluginView";
        static constexpr char signature[] =
                "(Landroid/view/View;FFFFZ)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void AddPluginViewWrapper(mozilla::jni::Object::Param, float, float, float, float, bool);

public:
    struct AlertsProgressListener_OnProgress_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "alertsProgressListener_OnProgress";
        static constexpr char signature[] =
                "(Ljava/lang/String;JJLjava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void AlertsProgressListener_OnProgress(mozilla::jni::String::Param, int64_t, int64_t, mozilla::jni::String::Param);

public:
    struct CancelVibrate_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "cancelVibrate";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void CancelVibrate();

public:
    struct CheckURIVisited_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "checkUriVisited";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void CheckURIVisited(mozilla::jni::String::Param);

public:
    struct ClearMessageList_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "clearMessageList";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void ClearMessageList(int32_t);

public:
    struct CloseCamera_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "closeCamera";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void CloseCamera();

public:
    struct CloseNotification_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "closeNotification";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void CloseNotification(mozilla::jni::String::Param);

public:
    struct ConnectionGetMimeType_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "connectionGetMimeType";
        static constexpr char signature[] =
                "(Ljava/net/URLConnection;)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef ConnectionGetMimeType(mozilla::jni::Object::Param);

public:
    struct CreateInputStream_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "createInputStream";
        static constexpr char signature[] =
                "(Ljava/net/URLConnection;)Ljava/io/InputStream;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::Object::LocalRef CreateInputStream(mozilla::jni::Object::Param);

public:
    struct CreateMessageListWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "createMessageList";
        static constexpr char signature[] =
                "(JJ[Ljava/lang/String;ILjava/lang/String;ZZJZI)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void CreateMessageListWrapper(int64_t, int64_t, mozilla::jni::ObjectArray::Param, int32_t, mozilla::jni::String::Param, bool, bool, int64_t, bool, int32_t);

public:
    struct CreateShortcut_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "createShortcut";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void CreateShortcut(mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct DeleteMessageWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "deleteMessage";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void DeleteMessageWrapper(int32_t, int32_t);

public:
    struct DisableBatteryNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "disableBatteryNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void DisableBatteryNotifications();

public:
    struct DisableNetworkNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "disableNetworkNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void DisableNetworkNotifications();

public:
    struct DisableScreenOrientationNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "disableScreenOrientationNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void DisableScreenOrientationNotifications();

public:
    struct DisableSensor_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "disableSensor";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void DisableSensor(int32_t);

public:
    struct EnableBatteryNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "enableBatteryNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void EnableBatteryNotifications();

public:
    struct EnableLocation_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "enableLocation";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void EnableLocation(bool);

public:
    struct EnableLocationHighAccuracy_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "enableLocationHighAccuracy";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void EnableLocationHighAccuracy(bool);

public:
    struct EnableNetworkNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "enableNetworkNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void EnableNetworkNotifications();

public:
    struct EnableScreenOrientationNotifications_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "enableScreenOrientationNotifications";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void EnableScreenOrientationNotifications();

public:
    struct EnableSensor_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "enableSensor";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void EnableSensor(int32_t);

public:
    struct GamepadAdded_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "gamepadAdded";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void GamepadAdded(int32_t, int32_t);

public:
    struct GetConnection_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "getConnection";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/net/URLConnection;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::Object::LocalRef GetConnection(mozilla::jni::String::Param);

public:
    struct GetContext_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "getContext";
        static constexpr char signature[] =
                "()Landroid/content/Context;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::Object::LocalRef GetContext();

public:
    struct GetCurrentBatteryInformationWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::DoubleArray::LocalRef ReturnType;
        typedef mozilla::jni::DoubleArray::Param SetterType;
        static constexpr char name[] = "getCurrentBatteryInformation";
        static constexpr char signature[] =
                "()[D";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::DoubleArray::LocalRef GetCurrentBatteryInformationWrapper();

public:
    struct GetCurrentNetworkInformationWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::DoubleArray::LocalRef ReturnType;
        typedef mozilla::jni::DoubleArray::Param SetterType;
        static constexpr char name[] = "getCurrentNetworkInformation";
        static constexpr char signature[] =
                "()[D";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::DoubleArray::LocalRef GetCurrentNetworkInformationWrapper();

public:
    struct GetDensity_t {
        typedef GeckoAppShell Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "getDensity";
        static constexpr char signature[] =
                "()F";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static float GetDensity();

public:
    struct GetDpiWrapper_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        static constexpr char name[] = "getDpi";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static int32_t GetDpiWrapper();

public:
    struct GetExtensionFromMimeTypeWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "getExtensionFromMimeType";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef GetExtensionFromMimeTypeWrapper(mozilla::jni::String::Param);

public:
    struct GetExternalPublicDirectory_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "getExternalPublicDirectory";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef GetExternalPublicDirectory(mozilla::jni::String::Param);

public:
    struct GetHandlersForMimeTypeWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        static constexpr char name[] = "getHandlersForMimeType";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::ObjectArray::LocalRef GetHandlersForMimeTypeWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct GetHandlersForURLWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::ObjectArray::LocalRef ReturnType;
        typedef mozilla::jni::ObjectArray::Param SetterType;
        static constexpr char name[] = "getHandlersForURL";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::ObjectArray::LocalRef GetHandlersForURLWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct GetIconForExtensionWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::ByteArray::LocalRef ReturnType;
        typedef mozilla::jni::ByteArray::Param SetterType;
        static constexpr char name[] = "getIconForExtension";
        static constexpr char signature[] =
                "(Ljava/lang/String;I)[B";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::ByteArray::LocalRef GetIconForExtensionWrapper(mozilla::jni::String::Param, int32_t);

public:
    struct GetMaxTouchPoints_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        static constexpr char name[] = "getMaxTouchPoints";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static int32_t GetMaxTouchPoints();

public:
    struct GetMessageWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "getMessage";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void GetMessageWrapper(int32_t, int32_t);

public:
    struct GetMimeTypeFromExtensionsWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "getMimeTypeFromExtensions";
        static constexpr char signature[] =
                "(Ljava/lang/String;)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef GetMimeTypeFromExtensionsWrapper(mozilla::jni::String::Param);

public:
    struct GetNextMessageInListWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "getNextMessageInList";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void GetNextMessageInListWrapper(int32_t, int32_t);

public:
    struct GetProxyForURIWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "getProxyForURI";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef GetProxyForURIWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, int32_t);

public:
    struct GetScreenDepthWrapper_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        static constexpr char name[] = "getScreenDepth";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static int32_t GetScreenDepthWrapper();

public:
    struct GetScreenOrientationWrapper_t {
        typedef GeckoAppShell Owner;
        typedef int16_t ReturnType;
        typedef int16_t SetterType;
        static constexpr char name[] = "getScreenOrientation";
        static constexpr char signature[] =
                "()S";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static int16_t GetScreenOrientationWrapper();

public:
    struct GetShowPasswordSetting_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "getShowPasswordSetting";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool GetShowPasswordSetting();

public:
    struct GetSystemColoursWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::IntArray::LocalRef ReturnType;
        typedef mozilla::jni::IntArray::Param SetterType;
        static constexpr char name[] = "getSystemColors";
        static constexpr char signature[] =
                "()[I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::IntArray::LocalRef GetSystemColoursWrapper();

public:
    struct HandleGeckoMessageWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "handleGeckoMessage";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/util/NativeJSContainer;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void HandleGeckoMessageWrapper(mozilla::jni::Object::Param);

public:
    struct HandleUncaughtException_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "handleUncaughtException";
        static constexpr char signature[] =
                "(Ljava/lang/Thread;Ljava/lang/Throwable;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::IGNORE;
    };

    static void HandleUncaughtException(mozilla::jni::Object::Param, mozilla::jni::Throwable::Param);

public:
    struct HideProgressDialog_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "hideProgressDialog";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void HideProgressDialog();

public:
    struct InitCameraWrapper_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::IntArray::LocalRef ReturnType;
        typedef mozilla::jni::IntArray::Param SetterType;
        static constexpr char name[] = "initCamera";
        static constexpr char signature[] =
                "(Ljava/lang/String;III)[I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::IntArray::LocalRef InitCameraWrapper(mozilla::jni::String::Param, int32_t, int32_t, int32_t);

public:
    struct IsNetworkLinkKnown_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "isNetworkLinkKnown";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool IsNetworkLinkKnown();

public:
    struct IsNetworkLinkUp_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "isNetworkLinkUp";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool IsNetworkLinkUp();

public:
    struct IsTablet_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "isTablet";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool IsTablet();

public:
    struct KillAnyZombies_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "killAnyZombies";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void KillAnyZombies();

public:
    struct LoadPluginClass_t {
        typedef GeckoAppShell Owner;
        typedef mozilla::jni::ClassObject::LocalRef ReturnType;
        typedef mozilla::jni::ClassObject::Param SetterType;
        static constexpr char name[] = "loadPluginClass";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Class;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::ClassObject::LocalRef LoadPluginClass(mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct LockScreenOrientation_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "lockScreenOrientation";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void LockScreenOrientation(int32_t);

public:
    struct MarkURIVisited_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "markUriVisited";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void MarkURIVisited(mozilla::jni::String::Param);

public:
    struct MoveTaskToBack_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "moveTaskToBack";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void MoveTaskToBack();

public:
    struct NetworkLinkType_t {
        typedef GeckoAppShell Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        static constexpr char name[] = "networkLinkType";
        static constexpr char signature[] =
                "()I";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static int32_t NetworkLinkType();

public:
    struct NotifyDefaultPrevented_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "notifyDefaultPrevented";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void NotifyDefaultPrevented(bool);

public:
    struct NotifyIME_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "notifyIME";
        static constexpr char signature[] =
                "(I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void NotifyIME(int32_t);

public:
    struct NotifyIMEChange_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "notifyIMEChange";
        static constexpr char signature[] =
                "(Ljava/lang/String;III)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void NotifyIMEChange(mozilla::jni::String::Param, int32_t, int32_t, int32_t);

public:
    struct NotifyIMEContext_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "notifyIMEContext";
        static constexpr char signature[] =
                "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void NotifyIMEContext(int32_t, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct NotifyWakeLockChanged_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "notifyWakeLockChanged";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void NotifyWakeLockChanged(mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct OpenUriExternal_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "openUriExternal";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool OpenUriExternal(mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct PerformHapticFeedback_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "performHapticFeedback";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void PerformHapticFeedback(bool);

public:
    struct PumpMessageLoop_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "pumpMessageLoop";
        static constexpr char signature[] =
                "(Landroid/os/Message;)Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool PumpMessageLoop(mozilla::jni::Object::Param);

public:
    struct RegisterSurfaceTextureFrameListener_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "registerSurfaceTextureFrameListener";
        static constexpr char signature[] =
                "(Ljava/lang/Object;I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void RegisterSurfaceTextureFrameListener(mozilla::jni::Object::Param, int32_t);

public:
    struct RemovePluginView_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "removePluginView";
        static constexpr char signature[] =
                "(Landroid/view/View;Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void RemovePluginView(mozilla::jni::Object::Param, bool);

public:
    struct RequestUiThreadCallback_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "requestUiThreadCallback";
        static constexpr char signature[] =
                "(J)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void RequestUiThreadCallback(int64_t);

public:
    struct ScheduleRestart_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "scheduleRestart";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void ScheduleRestart();

public:
    struct SendMessageWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "sendMessage";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;I)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void SendMessageWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param, int32_t);

public:
    struct SetFullScreen_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "setFullScreen";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void SetFullScreen(bool);

public:
    struct SetKeepScreenOn_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "setKeepScreenOn";
        static constexpr char signature[] =
                "(Z)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void SetKeepScreenOn(bool);

public:
    struct SetURITitle_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "setUriTitle";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void SetURITitle(mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct ShowAlertNotificationWrapper_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "showAlertNotification";
        static constexpr char signature[] =
                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void ShowAlertNotificationWrapper(mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param, mozilla::jni::String::Param);

public:
    struct ShowInputMethodPicker_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "showInputMethodPicker";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void ShowInputMethodPicker();

public:
    struct StartMonitoringGamepad_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "startMonitoringGamepad";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void StartMonitoringGamepad();

public:
    struct StopMonitoringGamepad_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "stopMonitoringGamepad";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void StopMonitoringGamepad();

public:
    struct UnlockProfile_t {
        typedef GeckoAppShell Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "unlockProfile";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool UnlockProfile();

public:
    struct UnlockScreenOrientation_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "unlockScreenOrientation";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void UnlockScreenOrientation();

public:
    struct UnregisterSurfaceTextureFrameListener_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "unregisterSurfaceTextureFrameListener";
        static constexpr char signature[] =
                "(Ljava/lang/Object;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void UnregisterSurfaceTextureFrameListener(mozilla::jni::Object::Param);

public:
    struct Vibrate1_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "vibrate";
        static constexpr char signature[] =
                "(J)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void Vibrate1(int64_t);

public:
    struct VibrateA_t {
        typedef GeckoAppShell Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "vibrate";
        static constexpr char signature[] =
                "([JI)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void VibrateA(mozilla::jni::LongArray::Param, int32_t);

};

class GeckoJavaSampler : public mozilla::jni::Class<GeckoJavaSampler> {

public:
    typedef mozilla::jni::Ref<GeckoJavaSampler> Ref;
    typedef mozilla::jni::LocalRef<GeckoJavaSampler> LocalRef;
    typedef mozilla::jni::GlobalRef<GeckoJavaSampler> GlobalRef;
    typedef const typename mozilla::jni::Param<GeckoJavaSampler>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/GeckoJavaSampler";

protected:
    GeckoJavaSampler(jobject instance) : Class(instance) {}

public:
    struct GetFrameNameJavaProfilingWrapper_t {
        typedef GeckoJavaSampler Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "getFrameName";
        static constexpr char signature[] =
                "(III)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef GetFrameNameJavaProfilingWrapper(int32_t, int32_t, int32_t);

public:
    struct GetSampleTimeJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef double ReturnType;
        typedef double SetterType;
        static constexpr char name[] = "getSampleTime";
        static constexpr char signature[] =
                "(II)D";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static double GetSampleTimeJavaProfiling(int32_t, int32_t);

public:
    struct GetThreadNameJavaProfilingWrapper_t {
        typedef GeckoJavaSampler Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "getThreadName";
        static constexpr char signature[] =
                "(I)Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef GetThreadNameJavaProfilingWrapper(int32_t);

public:
    struct PauseJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "pause";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void PauseJavaProfiling();

public:
    struct StartJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "start";
        static constexpr char signature[] =
                "(II)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void StartJavaProfiling(int32_t, int32_t);

public:
    struct StopJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "stop";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void StopJavaProfiling();

public:
    struct UnpauseJavaProfiling_t {
        typedef GeckoJavaSampler Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "unpause";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void UnpauseJavaProfiling();

};

class RestrictedProfiles : public mozilla::jni::Class<RestrictedProfiles> {

public:
    typedef mozilla::jni::Ref<RestrictedProfiles> Ref;
    typedef mozilla::jni::LocalRef<RestrictedProfiles> LocalRef;
    typedef mozilla::jni::GlobalRef<RestrictedProfiles> GlobalRef;
    typedef const typename mozilla::jni::Param<RestrictedProfiles>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/RestrictedProfiles";

protected:
    RestrictedProfiles(jobject instance) : Class(instance) {}

public:
    struct GetUserRestrictions_t {
        typedef RestrictedProfiles Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "getUserRestrictions";
        static constexpr char signature[] =
                "()Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef GetUserRestrictions();

public:
    struct IsAllowed_t {
        typedef RestrictedProfiles Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "isAllowed";
        static constexpr char signature[] =
                "(ILjava/lang/String;)Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool IsAllowed(int32_t, mozilla::jni::String::Param);

public:
    struct IsUserRestricted_t {
        typedef RestrictedProfiles Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "isUserRestricted";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool IsUserRestricted();

};

class SurfaceBits : public mozilla::jni::Class<SurfaceBits> {

public:
    typedef mozilla::jni::Ref<SurfaceBits> Ref;
    typedef mozilla::jni::LocalRef<SurfaceBits> LocalRef;
    typedef mozilla::jni::GlobalRef<SurfaceBits> GlobalRef;
    typedef const typename mozilla::jni::Param<SurfaceBits>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/SurfaceBits";

protected:
    SurfaceBits(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef SurfaceBits Owner;
        typedef SurfaceBits::LocalRef ReturnType;
        typedef SurfaceBits::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static SurfaceBits::LocalRef New();

public:
    struct Buffer_t {
        typedef SurfaceBits Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "buffer";
        static constexpr char signature[] =
                "Ljava/nio/ByteBuffer;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef Buffer() const;

    void Buffer(mozilla::jni::Object::Param) const;

public:
    struct Format_t {
        typedef SurfaceBits Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        static constexpr char name[] = "format";
        static constexpr char signature[] =
                "I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    int32_t Format() const;

    void Format(int32_t) const;

public:
    struct Height_t {
        typedef SurfaceBits Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        static constexpr char name[] = "height";
        static constexpr char signature[] =
                "I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    int32_t Height() const;

    void Height(int32_t) const;

public:
    struct Width_t {
        typedef SurfaceBits Owner;
        typedef int32_t ReturnType;
        typedef int32_t SetterType;
        static constexpr char name[] = "width";
        static constexpr char signature[] =
                "I";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    int32_t Width() const;

    void Width(int32_t) const;

};

class ThumbnailHelper : public mozilla::jni::Class<ThumbnailHelper> {

public:
    typedef mozilla::jni::Ref<ThumbnailHelper> Ref;
    typedef mozilla::jni::LocalRef<ThumbnailHelper> LocalRef;
    typedef mozilla::jni::GlobalRef<ThumbnailHelper> GlobalRef;
    typedef const typename mozilla::jni::Param<ThumbnailHelper>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/ThumbnailHelper";

protected:
    ThumbnailHelper(jobject instance) : Class(instance) {}

public:
    struct SendThumbnail_t {
        typedef ThumbnailHelper Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "notifyThumbnail";
        static constexpr char signature[] =
                "(Ljava/nio/ByteBuffer;IZZ)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void SendThumbnail(mozilla::jni::Object::Param, int32_t, bool, bool);

};

class DisplayPortMetrics : public mozilla::jni::Class<DisplayPortMetrics> {

public:
    typedef mozilla::jni::Ref<DisplayPortMetrics> Ref;
    typedef mozilla::jni::LocalRef<DisplayPortMetrics> LocalRef;
    typedef mozilla::jni::GlobalRef<DisplayPortMetrics> GlobalRef;
    typedef const typename mozilla::jni::Param<DisplayPortMetrics>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/DisplayPortMetrics";

protected:
    DisplayPortMetrics(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef DisplayPortMetrics Owner;
        typedef DisplayPortMetrics::LocalRef ReturnType;
        typedef DisplayPortMetrics::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(FFFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static DisplayPortMetrics::LocalRef New(float, float, float, float, float);

public:
    struct MPosition_t {
        typedef DisplayPortMetrics Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "mPosition";
        static constexpr char signature[] =
                "Landroid/graphics/RectF;";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef MPosition() const;

public:
    struct Resolution_t {
        typedef DisplayPortMetrics Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "resolution";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float Resolution() const;

};

class GLController : public mozilla::jni::Class<GLController> {

public:
    typedef mozilla::jni::Ref<GLController> Ref;
    typedef mozilla::jni::LocalRef<GLController> LocalRef;
    typedef mozilla::jni::GlobalRef<GLController> GlobalRef;
    typedef const typename mozilla::jni::Param<GLController>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/GLController";

protected:
    GLController(jobject instance) : Class(instance) {}

public:
    struct CreateEGLSurfaceForCompositorWrapper_t {
        typedef GLController Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "createEGLSurfaceForCompositor";
        static constexpr char signature[] =
                "()Ljavax/microedition/khronos/egl/EGLSurface;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef CreateEGLSurfaceForCompositorWrapper() const;

};

class GeckoLayerClient : public mozilla::jni::Class<GeckoLayerClient> {

public:
    typedef mozilla::jni::Ref<GeckoLayerClient> Ref;
    typedef mozilla::jni::LocalRef<GeckoLayerClient> LocalRef;
    typedef mozilla::jni::GlobalRef<GeckoLayerClient> GlobalRef;
    typedef const typename mozilla::jni::Param<GeckoLayerClient>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/GeckoLayerClient";

protected:
    GeckoLayerClient(jobject instance) : Class(instance) {}

public:
    struct ActivateProgram_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "activateProgram";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void ActivateProgram() const;

public:
    struct ContentDocumentChanged_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "contentDocumentChanged";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void ContentDocumentChanged() const;

public:
    struct CreateFrame_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "createFrame";
        static constexpr char signature[] =
                "()Lorg/mozilla/gecko/gfx/LayerRenderer$Frame;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef CreateFrame() const;

public:
    struct DeactivateProgramAndRestoreState_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "deactivateProgramAndRestoreState";
        static constexpr char signature[] =
                "(ZIIII)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void DeactivateProgramAndRestoreState(bool, int32_t, int32_t, int32_t, int32_t) const;

public:
    struct GetDisplayPort_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "getDisplayPort";
        static constexpr char signature[] =
                "(ZZILorg/mozilla/gecko/gfx/ImmutableViewportMetrics;)Lorg/mozilla/gecko/gfx/DisplayPortMetrics;";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef GetDisplayPort(bool, bool, int32_t, mozilla::jni::Object::Param) const;

public:
    struct IsContentDocumentDisplayed_t {
        typedef GeckoLayerClient Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "isContentDocumentDisplayed";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    bool IsContentDocumentDisplayed() const;

public:
    struct ProgressiveUpdateCallback_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "progressiveUpdateCallback";
        static constexpr char signature[] =
                "(ZFFFFFZ)Lorg/mozilla/gecko/gfx/ProgressiveUpdateData;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef ProgressiveUpdateCallback(bool, float, float, float, float, float, bool) const;

public:
    struct SetFirstPaintViewport_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "setFirstPaintViewport";
        static constexpr char signature[] =
                "(FFFFFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void SetFirstPaintViewport(float, float, float, float, float, float, float) const;

public:
    struct SetPageRect_t {
        typedef GeckoLayerClient Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "setPageRect";
        static constexpr char signature[] =
                "(FFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void SetPageRect(float, float, float, float) const;

public:
    struct SyncFrameMetrics_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "syncFrameMetrics";
        static constexpr char signature[] =
                "(FFFFFFFZIIIIFZ)Lorg/mozilla/gecko/gfx/ViewTransform;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef SyncFrameMetrics(float, float, float, float, float, float, float, bool, int32_t, int32_t, int32_t, int32_t, float, bool) const;

public:
    struct SyncViewportInfo_t {
        typedef GeckoLayerClient Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "syncViewportInfo";
        static constexpr char signature[] =
                "(IIIIFZ)Lorg/mozilla/gecko/gfx/ViewTransform;";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef SyncViewportInfo(int32_t, int32_t, int32_t, int32_t, float, bool) const;

};

class ImmutableViewportMetrics : public mozilla::jni::Class<ImmutableViewportMetrics> {

public:
    typedef mozilla::jni::Ref<ImmutableViewportMetrics> Ref;
    typedef mozilla::jni::LocalRef<ImmutableViewportMetrics> LocalRef;
    typedef mozilla::jni::GlobalRef<ImmutableViewportMetrics> GlobalRef;
    typedef const typename mozilla::jni::Param<ImmutableViewportMetrics>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/ImmutableViewportMetrics";

protected:
    ImmutableViewportMetrics(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef ImmutableViewportMetrics Owner;
        typedef ImmutableViewportMetrics::LocalRef ReturnType;
        typedef ImmutableViewportMetrics::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(FFFFFFFFFFFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static ImmutableViewportMetrics::LocalRef New(float, float, float, float, float, float, float, float, float, float, float, float, float);

};

class LayerView : public mozilla::jni::Class<LayerView> {

public:
    typedef mozilla::jni::Ref<LayerView> Ref;
    typedef mozilla::jni::LocalRef<LayerView> LocalRef;
    typedef mozilla::jni::GlobalRef<LayerView> GlobalRef;
    typedef const typename mozilla::jni::Param<LayerView>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/LayerView";

protected:
    LayerView(jobject instance) : Class(instance) {}

public:
    struct RegisterCompositorWrapper_t {
        typedef LayerView Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "registerCxxCompositor";
        static constexpr char signature[] =
                "()Lorg/mozilla/gecko/gfx/GLController;";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::Object::LocalRef RegisterCompositorWrapper();

public:
    struct updateZoomedView_t {
        typedef LayerView Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "updateZoomedView";
        static constexpr char signature[] =
                "(Ljava/nio/ByteBuffer;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void updateZoomedView(mozilla::jni::Object::Param);

};

class NativePanZoomController : public mozilla::jni::Class<NativePanZoomController> {

public:
    typedef mozilla::jni::Ref<NativePanZoomController> Ref;
    typedef mozilla::jni::LocalRef<NativePanZoomController> LocalRef;
    typedef mozilla::jni::GlobalRef<NativePanZoomController> GlobalRef;
    typedef const typename mozilla::jni::Param<NativePanZoomController>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/NativePanZoomController";

protected:
    NativePanZoomController(jobject instance) : Class(instance) {}

public:
    struct RequestContentRepaintWrapper_t {
        typedef NativePanZoomController Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "requestContentRepaint";
        static constexpr char signature[] =
                "(FFFFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void RequestContentRepaintWrapper(float, float, float, float, float) const;

};

class ProgressiveUpdateData : public mozilla::jni::Class<ProgressiveUpdateData> {

public:
    typedef mozilla::jni::Ref<ProgressiveUpdateData> Ref;
    typedef mozilla::jni::LocalRef<ProgressiveUpdateData> LocalRef;
    typedef mozilla::jni::GlobalRef<ProgressiveUpdateData> GlobalRef;
    typedef const typename mozilla::jni::Param<ProgressiveUpdateData>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/ProgressiveUpdateData";

protected:
    ProgressiveUpdateData(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef ProgressiveUpdateData Owner;
        typedef ProgressiveUpdateData::LocalRef ReturnType;
        typedef ProgressiveUpdateData::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static ProgressiveUpdateData::LocalRef New();

public:
    struct SetViewport_t {
        typedef ProgressiveUpdateData Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "setViewport";
        static constexpr char signature[] =
                "(Lorg/mozilla/gecko/gfx/ImmutableViewportMetrics;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void SetViewport(mozilla::jni::Object::Param) const;

public:
    struct Abort_t {
        typedef ProgressiveUpdateData Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "abort";
        static constexpr char signature[] =
                "Z";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    bool Abort() const;

    void Abort(bool) const;

public:
    struct Scale_t {
        typedef ProgressiveUpdateData Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "scale";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float Scale() const;

    void Scale(float) const;

public:
    struct X_t {
        typedef ProgressiveUpdateData Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "x";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float X() const;

    void X(float) const;

public:
    struct Y_t {
        typedef ProgressiveUpdateData Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "y";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float Y() const;

    void Y(float) const;

};

class ViewTransform : public mozilla::jni::Class<ViewTransform> {

public:
    typedef mozilla::jni::Ref<ViewTransform> Ref;
    typedef mozilla::jni::LocalRef<ViewTransform> LocalRef;
    typedef mozilla::jni::GlobalRef<ViewTransform> GlobalRef;
    typedef const typename mozilla::jni::Param<ViewTransform>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/gfx/ViewTransform";

protected:
    ViewTransform(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef ViewTransform Owner;
        typedef ViewTransform::LocalRef ReturnType;
        typedef ViewTransform::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(FFF)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static ViewTransform::LocalRef New(float, float, float);

public:
    struct FixedLayerMarginBottom_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "fixedLayerMarginBottom";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float FixedLayerMarginBottom() const;

    void FixedLayerMarginBottom(float) const;

public:
    struct FixedLayerMarginLeft_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "fixedLayerMarginLeft";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float FixedLayerMarginLeft() const;

    void FixedLayerMarginLeft(float) const;

public:
    struct FixedLayerMarginRight_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "fixedLayerMarginRight";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float FixedLayerMarginRight() const;

    void FixedLayerMarginRight(float) const;

public:
    struct FixedLayerMarginTop_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "fixedLayerMarginTop";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float FixedLayerMarginTop() const;

    void FixedLayerMarginTop(float) const;

public:
    struct OffsetX_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "offsetX";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float OffsetX() const;

    void OffsetX(float) const;

public:
    struct OffsetY_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "offsetY";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float OffsetY() const;

    void OffsetY(float) const;

public:
    struct Scale_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "scale";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float Scale() const;

    void Scale(float) const;

public:
    struct X_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "x";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float X() const;

    void X(float) const;

public:
    struct Y_t {
        typedef ViewTransform Owner;
        typedef float ReturnType;
        typedef float SetterType;
        static constexpr char name[] = "y";
        static constexpr char signature[] =
                "F";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    float Y() const;

    void Y(float) const;

};

class NativeZip : public mozilla::jni::Class<NativeZip> {

public:
    typedef mozilla::jni::Ref<NativeZip> Ref;
    typedef mozilla::jni::LocalRef<NativeZip> LocalRef;
    typedef mozilla::jni::GlobalRef<NativeZip> GlobalRef;
    typedef const typename mozilla::jni::Param<NativeZip>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/mozglue/NativeZip";

protected:
    NativeZip(jobject instance) : Class(instance) {}

public:
    struct CreateInputStream_t {
        typedef NativeZip Owner;
        typedef mozilla::jni::Object::LocalRef ReturnType;
        typedef mozilla::jni::Object::Param SetterType;
        static constexpr char name[] = "createInputStream";
        static constexpr char signature[] =
                "(Ljava/nio/ByteBuffer;I)Ljava/io/InputStream;";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    mozilla::jni::Object::LocalRef CreateInputStream(mozilla::jni::Object::Param, int32_t) const;

};

class MatrixBlobCursor : public mozilla::jni::Class<MatrixBlobCursor> {

public:
    typedef mozilla::jni::Ref<MatrixBlobCursor> Ref;
    typedef mozilla::jni::LocalRef<MatrixBlobCursor> LocalRef;
    typedef mozilla::jni::GlobalRef<MatrixBlobCursor> GlobalRef;
    typedef const typename mozilla::jni::Param<MatrixBlobCursor>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/sqlite/MatrixBlobCursor";

protected:
    MatrixBlobCursor(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef MatrixBlobCursor Owner;
        typedef MatrixBlobCursor::LocalRef ReturnType;
        typedef MatrixBlobCursor::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "([Ljava/lang/String;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static MatrixBlobCursor::LocalRef New(mozilla::jni::ObjectArray::Param);

public:
    struct New2_t {
        typedef MatrixBlobCursor Owner;
        typedef MatrixBlobCursor::LocalRef ReturnType;
        typedef MatrixBlobCursor::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "([Ljava/lang/String;I)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static MatrixBlobCursor::LocalRef New(mozilla::jni::ObjectArray::Param, int32_t);

public:
    struct AddRow_t {
        typedef MatrixBlobCursor Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "addRow";
        static constexpr char signature[] =
                "(Ljava/lang/Iterable;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void AddRow(mozilla::jni::Object::Param) const;

public:
    struct AddRow2_t {
        typedef MatrixBlobCursor Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "addRow";
        static constexpr char signature[] =
                "(Ljava/util/ArrayList;I)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void AddRow(mozilla::jni::Object::Param, int32_t) const;

public:
    struct AddRow3_t {
        typedef MatrixBlobCursor Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "addRow";
        static constexpr char signature[] =
                "([Ljava/lang/Object;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    void AddRow(mozilla::jni::ObjectArray::Param) const;

};

class SQLiteBridgeException : public mozilla::jni::Class<SQLiteBridgeException> {

public:
    typedef mozilla::jni::Ref<SQLiteBridgeException> Ref;
    typedef mozilla::jni::LocalRef<SQLiteBridgeException> LocalRef;
    typedef mozilla::jni::GlobalRef<SQLiteBridgeException> GlobalRef;
    typedef const typename mozilla::jni::Param<SQLiteBridgeException>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/sqlite/SQLiteBridgeException";

protected:
    SQLiteBridgeException(jobject instance) : Class(instance) {}

public:
    struct New_t {
        typedef SQLiteBridgeException Owner;
        typedef SQLiteBridgeException::LocalRef ReturnType;
        typedef SQLiteBridgeException::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static SQLiteBridgeException::LocalRef New();

public:
    struct New2_t {
        typedef SQLiteBridgeException Owner;
        typedef SQLiteBridgeException::LocalRef ReturnType;
        typedef SQLiteBridgeException::Param SetterType;
        static constexpr char name[] = "<init>";
        static constexpr char signature[] =
                "(Ljava/lang/String;)V";
        static const bool isStatic = false;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static SQLiteBridgeException::LocalRef New(mozilla::jni::String::Param);

public:
    struct SerialVersionUID_t {
        typedef SQLiteBridgeException Owner;
        typedef int64_t ReturnType;
        typedef int64_t SetterType;
        static constexpr char name[] = "serialVersionUID";
        static constexpr char signature[] =
                "J";
        static const bool isStatic = true;
        static const bool isMultithreaded = true;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static int64_t SerialVersionUID();

};

class Clipboard : public mozilla::jni::Class<Clipboard> {

public:
    typedef mozilla::jni::Ref<Clipboard> Ref;
    typedef mozilla::jni::LocalRef<Clipboard> LocalRef;
    typedef mozilla::jni::GlobalRef<Clipboard> GlobalRef;
    typedef const typename mozilla::jni::Param<Clipboard>::Type& Param;

    static constexpr char name[] =
            "org/mozilla/gecko/util/Clipboard";

protected:
    Clipboard(jobject instance) : Class(instance) {}

public:
    struct ClearText_t {
        typedef Clipboard Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "clearText";
        static constexpr char signature[] =
                "()V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void ClearText();

public:
    struct GetClipboardTextWrapper_t {
        typedef Clipboard Owner;
        typedef mozilla::jni::String::LocalRef ReturnType;
        typedef mozilla::jni::String::Param SetterType;
        static constexpr char name[] = "getText";
        static constexpr char signature[] =
                "()Ljava/lang/String;";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static mozilla::jni::String::LocalRef GetClipboardTextWrapper();

public:
    struct HasText_t {
        typedef Clipboard Owner;
        typedef bool ReturnType;
        typedef bool SetterType;
        static constexpr char name[] = "hasText";
        static constexpr char signature[] =
                "()Z";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static bool HasText();

public:
    struct SetClipboardText_t {
        typedef Clipboard Owner;
        typedef void ReturnType;
        typedef void SetterType;
        static constexpr char name[] = "setText";
        static constexpr char signature[] =
                "(Ljava/lang/CharSequence;)V";
        static const bool isStatic = true;
        static const bool isMultithreaded = false;
        static const mozilla::jni::ExceptionMode exceptionMode = mozilla::jni::ExceptionMode::ABORT;
    };

    static void SetClipboardText(mozilla::jni::String::Param);

};


} /* widget */
} /* mozilla */
#endif // GeneratedJNIWrappers_h__
