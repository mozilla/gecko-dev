[workspace]

# These are the "root" crates, which we build and test as top-level targets.
# Their transitive dependencies and dev-dependencies are included automatically
# and do not need to be listed here. Their external dependencies are vendored
# into `third_party/rust` by `mach vendor rust`.
members = [
  "browser/app/nmhproxy/",
  "js/src/rust",
  "netwerk/base/idna_glue",
  "netwerk/test/http3server",
  "security/manager/ssl/ipcclientcerts",
  "security/manager/ssl/osclientcerts",
  "security/manager/ssl/tests/unit/pkcs11testmodule",
  "security/manager/ssl/tests/unit/test_trust_anchors",
  "security/manager/ssl/trust_anchors",
  "security/mls/mls_gk",
  "testing/geckodriver",
  "toolkit/components/uniffi-bindgen-gecko-js",
  "toolkit/crashreporter/client/app",
  "toolkit/crashreporter/crash_helper_server",
  "toolkit/crashreporter/crash_helper_client",
  "toolkit/crashreporter/minidump-analyzer/android/export",
  "toolkit/crashreporter/mozwer-rust",
  "toolkit/library/gtest/rust",
  "toolkit/library/rust/",
]

# Excluded crates may be built as dependencies, but won't be considered members
# of the workspace and their dev-dependencies won't be included.
exclude = [
  # Exclude third-party code vendored into mozilla-central.
  "servo",
  "third_party/rust",

  # Excluded because these crates have their own Cargo workspaces so they can't
  # be included in the top-level one.
  "gfx/wr",

  # Excluded because they are used only as dependencies, not top-level targets,
  # so we don't need to vendor their dev-dependencies.
  "gfx/webrender_bindings",
  "media/mp4parse-rust/mp4parse",
  "media/mp4parse-rust/mp4parse_capi",
  "xpcom/rust/gkrust_utils",
  "toolkit/crashreporter/minidump-analyzer",
  "tools/lint/test/files/clippy",
  "tools/fuzzing/rust",
  "dom/base/rust",
  "dom/origin-trials/ffi",
  "ipc/rust/ipdl_utils",

  # Excluded because we don't want to vendor their dependencies.
  "intl/l10n/rust/l10nregistry-tests",
]

# Use the new dependency resolver to reduce some of the platform-specific dependencies.
# This is required for 'third_party/rust/wgpu-hal'
resolver = "2"

[workspace.package]
rust-version = "1.82.0"

[workspace.dependencies]
# Shared across multiple UniFFI consumers.
uniffi = "0.29.1"
uniffi_bindgen = "0.29.1"
# Shared across multiple application-services consumers.
rusqlite = "0.33.0"
# Shared across multiple glean consumers.
glean = "=64.3.1"

# Explicitly specify what our profiles use.  The opt-level setting here is
# a total fiction; see the setup of MOZ_RUST_DEFAULT_FLAGS for what the
# opt-level setting will be as a result of various other configure flags.
[profile.dev]
opt-level = 1
rpath = false
lto = false
debug-assertions = true
panic = "abort"

[profile.release]
opt-level = 2
rpath = false
debug-assertions = false
panic = "abort"

# Optimize build dependencies, because bindgen and proc macros / style
# compilation take more to run than to build otherwise.
[profile.dev.build-override]
opt-level = 1

[profile.release.build-override]
opt-level = 1

# optimizing glsl more makes a big difference in swgl build times
[profile.dev.package.glsl]
opt-level = 2

[profile.release.package.glsl]
opt-level = 2

[patch.crates-io]
# The build system doesn't want those to be used, but they are pulled anyways (because
# dependencies can't be disabled based on features), but remain unused. We ensure they
# stay unused by overriding them with crates that contain enough to build the current
# code and will fail the build in unwanted cases.
cmake = { path = "build/rust/cmake" }
vcpkg = { path = "build/rust/vcpkg" }

# Helper crate for integration in the gecko build system.
mozbuild = { path = "build/rust/mozbuild" }

# Workspace hack
mozilla-central-workspace-hack = { path = "build/workspace-hack" }

# windows-targets replacement. It avoids the large dependencies of the original
# crate, which we don't really need as we require MSVC anyways.
windows-targets = { path = "build/rust/windows-targets" }

# Patch windows to use a non-vendored local copy of the crate.
windows = { path = "build/rust/windows" }

# Dummy oslog replacement. It's only used by glean in code that is not actually used.
oslog = { path = "build/rust/oslog" }

# Override terminal_size with a dummy crate that returns a fixed 80x25 terminal size.
terminal_size = { path = "build/rust/terminal_size" }

# Patch bitflags 1.0 to 2.0
bitflags = { path = "build/rust/bitflags" }

# Patch redox_users to an empty crate
redox_users = { path = "build/rust/redox_users" }

# Patch redox_syscall to an empty crate
redox_syscall = { path = "build/rust/redox_syscall" }

# Patch hermit-abi to an empty crate
hermit-abi = { path = "build/rust/hermit-abi" }

# Patch base64 0.13 to 0.22
base64_13 = { package = "base64", path = "build/rust/base64_13" }

# Patch base64 0.21 to 0.22
base64_21 = { package = "base64", path = "build/rust/base64" }

# Patch wasi 0.10 to 0.13
wasi_0_10 = { package = "wasi", path = "build/rust/wasi-0.10" }

# Patch wasi 0.11 to 0.13
wasi_0_11 = { package = "wasi", path = "build/rust/wasi" }

# tokio 0.29.0 includes an experimental "tracing" feature which requires
# backtrace ^0.3.58 and the `tokio_unstable` flag. We don't use it, and nothing
# else we do use requires backtrace, so dummy it out for now.
backtrace = { path = "build/rust/backtrace" }

# Patch bindgen 0.63 to 0.69
bindgen_0_63 = { package = "bindgen", path = "build/rust/bindgen-0.63" }
# Locally patch bindgen for https://github.com/rust-lang/rust-bindgen/pull/2824
# and for bug 1945218
bindgen = { path = "third_party/rust/bindgen" }

# Patch nix 0.26 to 0.29
nix = { path = "build/rust/nix" }

# Patch derive_more 0.99 to 1.0.0-beta
derive_more = { path = "build/rust/derive_more" }

# Patch autocfg to hide rustc output. Workaround for https://github.com/cuviper/autocfg/issues/30
autocfg = { path = "third_party/rust/autocfg" }

# Patch goblin 0.7.0 to 0.8
goblin = { path = "build/rust/goblin" }

# Implement getrandom 0.2 in terms of 0.3
getrandom = { path = "build/rust/getrandom" }

# Patch rustc-hash 1.1.0 to 2.1.1
rustc-hash = { path = "build/rust/rustc-hash" }

# Patch memoffset from 0.8.0 to 0.9.0 since it's compatible and it avoids duplication
memoffset = { path = "build/rust/memoffset" }

# Patch `hashbrown` 0.13.* to depend on 0.15.*
hashbrown_0_13 = { package = "hashbrown", path = "build/rust/hashbrown-0.13" }

# Patch `hashbrown` 0.14.* to depend on 0.15.*
hashbrown_0_14 = { package = "hashbrown", path = "build/rust/hashbrown" }

# Patch `socket2` 0.4 to 0.5
socket2 = { path = "build/rust/socket2" }

# Patch `thiserror` 1 to 2.
thiserror = { path = "build/rust/thiserror" }

# The following overrides point to dummy projects, as a temporary measure until this is resolved:
# https://github.com/rust-lang/cargo/issues/6179
js-sys = { path = "build/rust/dummy-web/js-sys" }
wasm-bindgen = { path = "build/rust/dummy-web/wasm-bindgen" }
web-sys = { path = "build/rust/dummy-web/web-sys" }


# Upgrade `core-foundation` 0.9.* to 0.10.
core-foundation = { path = "build/rust/core-foundation" }
# Patch `core-graphics-types` 0.1.* to 0.2.
core-graphics-types = { path = "build/rust/core-graphics-types" }

# Patch `half` 1.* to 2.
half = { path = "build/rust/half" }

# Upgrade `rusqlite` 0.31 to 0.33.
rusqlite = { path = "build/rust/rusqlite" }

# Patch `strum` 0.26.* to 0.27.
strum = { path = "build/rust/strum" }

# Patch `itertools` 0.10.* to 0.14.
itertools = { path = "build/rust/itertools" }

# Overrides to allow easier use of common internal crates.
moz_asserts = { path = "mozglue/static/rust/moz_asserts" }

# Patch `rure` to disable building the cdylib and staticlib targets
# Cargo has no way to disable building targets your dependencies provide which
# you don't depend on, and linking the cdylib breaks during instrumentation
# builds.
# Workaround for https://github.com/rust-lang/cargo/issues/11232
rure = { path = "third_party/rust/rure" }

# Patch `plist` to work with `indexmap` 2.*
plist = { path = "third_party/rust/plist" }

# Patch `unicode-width` 0.1.* to 0.2.
unicode-width = { path = "build/rust/unicode-width" }

# To-be-published changes.
unicode-bidi = { git = "https://github.com/servo/unicode-bidi", rev = "ca612daf1c08c53abe07327cb3e6ef6e0a760f0c" }
nss-gk-api = { git = "https://github.com/beurdouche/nss-gk-api", rev = "e48a946811ffd64abc78de3ee284957d8d1c0d63" }
cssparser = { git = "https://github.com/servo/rust-cssparser", rev = "958a3f098acb92ddacdce18a7ef2c4a87ac3326f" }

# Other overrides
any_all_workaround = { git = "https://github.com/hsivonen/any_all_workaround", rev = "7fb1b7034c9f172aade21ee1c8554e8d8a48af80" }
chardetng = { git = "https://github.com/hsivonen/chardetng", rev = "3484d3e3ebdc8931493aa5df4d7ee9360a90e76b" }
chardetng_c = { git = "https://github.com/hsivonen/chardetng_c", rev = "ed8a4c6f900a90d4dbc1d64b856e61490a1c3570" }
coremidi = { git = "https://github.com/chris-zen/coremidi.git", rev = "fc68464b5445caf111e41f643a2e69ccce0b4f83" }
cose = { git = "https://github.com/franziskuskiefer/cose-rust", rev = "43c22248d136c8b38fe42ea709d08da6355cf04b" }
firefox-on-glean = { path = "toolkit/components/glean/api" }
icu_capi = { path = "intl/icu_capi" }
icu_segmenter_data = { path = "intl/icu_segmenter_data" }
libudev-sys = { path = "dom/webauthn/libudev-sys" }
midir = { git = "https://github.com/mozilla/midir.git", rev = "85156e360a37d851734118104619f86bd18e94c6" }
# Allow webrender to have a versioned dependency on the older crate on crates.io
# in order to build standalone.
malloc_size_of_derive = { path = "xpcom/rust/malloc_size_of_derive" }
# Use the in-tree code instead of pulling it in. It matches the crates.io version
wr_malloc_size_of = { path = "gfx/wr/wr_malloc_size_of" }

# objc 0.2.7 + fa7ca43b862861dd1cd000d7ad01e6e0266cda13
objc = { git = "https://github.com/glandium/rust-objc", rev = "4de89f5aa9851ceca4d40e7ac1e2759410c04324" }

# application-services overrides to make updating them all simpler.
interrupt-support = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }
relevancy = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }
search = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }
sql-support = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }
suggest = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }
sync15 = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }
tabs = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }
viaduct = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }
webext-storage = { git = "https://github.com/mozilla/application-services", rev = "280db3a3a06a8f517151ff0b84b5ce67fcc7afd6" }

allocator-api2 = { path = "third_party/rust/allocator-api2" }
