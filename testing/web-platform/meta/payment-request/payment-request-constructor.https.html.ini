[payment-request-constructor.https.html]
  [Use provided request ID]
    expected: 
      if not e10s: FAIL

  [If the length of the methodData sequence is zero, then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If the length of the paymentMethod.supportedMethods sequence is zero, then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [Method data must be JSON-serializable object (a list in this case)]
    expected: 
      if not e10s: FAIL

  [Method data must be JSON-serializable object (a dictionary in this case)]
    expected: 
      if not e10s: FAIL

  [Rethrow any exceptions of JSON-serializing paymentMethod.data into a string]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If the first character of details.total.amount.value is U+002D HYPHEN-MINUS, then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [Modifier data must be JSON-serializable object (a list in this case)]
    expected: 
      if not e10s: FAIL

  [Modifier data must be JSON-serializable object (a dictionary in this case)]
    expected: 
      if not e10s: FAIL

  [Rethrow any exceptions of JSON-serializing modifier.data into a string]
    expected: 
      if not e10s: FAIL

  [Total is required]
    expected: 
      if not e10s: FAIL

  [Label is required]
    expected: 
      if not e10s: FAIL

  [Amount is required]
    expected: 
      if not e10s: FAIL

  [Amount value is required]
    expected: 
      if not e10s: FAIL

  [Amount currency is required]
    expected: 
      if not e10s: FAIL

  [Shipping type should be valid]
    expected: 
      if not e10s: FAIL

  [If details.id is missing, assign a identifier]
    expected: 
      if not e10s: FAIL

  [If details.id is missing, assign a unique identifier]
    expected: 
      if not e10s: FAIL

  [If the same id is provided, then use it]
    expected: 
      if not e10s: FAIL

  [Use ids even if they are strange]
    expected: 
      if not e10s: FAIL

  [Method data must be JSON-serializable object (an object in this case)]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-1"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-1.00"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-1000.000"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [PaymentDetailsBase.0 can be 0 length]
    expected: 
      if not e10s: FAIL

  [PaymentDetailsBase.1 can be 0 length]
    expected: 
      if not e10s: FAIL

  [PaymentDetailsBase.2 can be 0 length]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [Negative values are allowed for displayItems.amount.value, irrespective of total amount]
    expected: 
      if not e10s: FAIL

  [it handles high precision currency values without throwing]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If there is no selected shipping option, then PaymentRequest.shippingOption remains null]
    expected: 
      if not e10s: FAIL

  [If there is a selected shipping option, then it becomes synchronously selected]
    expected: 
      if not e10s: FAIL

  [If there is a multiple selected shipping options, only the last is selected]
    expected: 
      if not e10s: FAIL

  [If there are any duplicate shipping option ids, then there are no shipping options]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1.00"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1000.000"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case ".99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-10."), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "10-"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case ""), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "null"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [Modifier data must be JSON-serializable object (a object in this case)]
    expected: 
      if not e10s: FAIL

  [PaymentRequest.shippingAddress must initially be null]
    expected: 
      if not e10s: FAIL

  [If options.requestShipping is not set, then request.shippingType attribute is null.]
    expected: 
      if not e10s: FAIL

  [If options.requestShipping is true, request.shippingType will be options.shippingType.]
    expected: 
      if not e10s: FAIL

  [If details.id is missing, assign an identifier]
    expected: 
      if not e10s: FAIL

  [ignore invalid payment method URLs]
    expected: 
      if not e10s: FAIL

  [Modifier method data must be JSON-serializable object]
    expected: 
      if not e10s: FAIL

  [If details.total.amount.value is not a valid decimal monetary value, then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [PaymentDetailsBase members can be 0 length]
    expected: 
      if not e10s: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value, then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value, then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [Throw TypeError if modifier.total.amount.value is not a valid decimal monetary value]
    expected: 
      if not e10s: FAIL

  [If amount.value of additionalDisplayItems is not a valid decimal monetary value, then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [Modifier data must be JSON-serializable object (an Array in this case)]
    expected:
      if not e10s: FAIL

  [Modifier data must be JSON-serializable object (an Object in this case)]
    expected:
      if not e10s: FAIL

  [Rethrow any exceptions of JSON-serializing modifier.data]
    expected: 
      if not e10s: FAIL

  [If there is a selected shipping option, and requestShipping is set, then that option becomes synchronously selected]
    expected: 
      if not e10s: FAIL

  [If requestShipping is set, and if there is a multiple selected shipping options, only the last is selected.]
    expected: 
      if not e10s: FAIL

  [If there are any duplicate shipping option ids, and shipping is requested, then throw a TypeError]
    expected: 
      if not e10s: FAIL

  [Throw when there are duplicate shippingOption ids, even if other values are different]
    expected: 
      if not e10s: FAIL

