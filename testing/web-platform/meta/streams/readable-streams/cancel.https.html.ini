[cancel.https.html]
  type: testharness
  disabled: @True
  [ReadableStream cancellation: integration test on an infinite stream derived from a random push source]
    expected: FAIL

  [ReadableStream cancellation: cancel(reason) should pass through the given reason to the underlying source]
    expected: FAIL

  [ReadableStream cancellation: cancel() on a locked stream should fail and not call the underlying source cancel]
    expected: FAIL

  [ReadableStream cancellation: should fulfill promise when cancel callback went fine]
    expected: FAIL

  [ReadableStream cancellation: returning a value from the underlying source's cancel should not affect the fulfillment value of the promise returned by the stream's cancel]
    expected: FAIL

  [ReadableStream cancellation: should reject promise when cancel callback raises an exception]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should fulfill when that one does (1)]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should fulfill when that one does (2)]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should reject when that one does]
    expected: FAIL

  [ReadableStream cancellation: cancelling before start finishes should prevent pull() from being called]
    expected: FAIL

  [ReadableStream cancellation: integration test on an infinite stream derived from a random push source]
    expected: FAIL

  [ReadableStream cancellation: cancel(reason) should pass through the given reason to the underlying source]
    expected: FAIL

  [ReadableStream cancellation: cancel() on a locked stream should fail and not call the underlying source cancel]
    expected: FAIL

  [ReadableStream cancellation: should fulfill promise when cancel callback went fine]
    expected: FAIL

  [ReadableStream cancellation: returning a value from the underlying source's cancel should not affect the fulfillment value of the promise returned by the stream's cancel]
    expected: FAIL

  [ReadableStream cancellation: should reject promise when cancel callback raises an exception]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should fulfill when that one does (1)]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should fulfill when that one does (2)]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should reject when that one does]
    expected: FAIL

  [ReadableStream cancellation: cancelling before start finishes should prevent pull() from being called]
    expected: FAIL

  [ReadableStream cancellation: integration test on an infinite stream derived from a random push source]
    expected: FAIL

  [ReadableStream cancellation: cancel(reason) should pass through the given reason to the underlying source]
    expected: FAIL

  [ReadableStream cancellation: cancel() on a locked stream should fail and not call the underlying source cancel]
    expected: FAIL

  [ReadableStream cancellation: should fulfill promise when cancel callback went fine]
    expected: FAIL

  [ReadableStream cancellation: returning a value from the underlying source's cancel should not affect the fulfillment value of the promise returned by the stream's cancel]
    expected: FAIL

  [ReadableStream cancellation: should reject promise when cancel callback raises an exception]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should fulfill when that one does (1)]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should fulfill when that one does (2)]
    expected: FAIL

  [ReadableStream cancellation: if the underlying source's cancel method returns a promise, the promise returned by the stream's cancel should reject when that one does]
    expected: FAIL

  [ReadableStream cancellation: cancelling before start finishes should prevent pull() from being called]
    expected: FAIL

