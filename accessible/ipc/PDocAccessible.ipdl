/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=2 et sw=2 tw=80: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PFileDescriptorSet;
include protocol PBrowser;

include "mozilla/GfxMessageUtils.h";

using nsIntRect from "nsRect.h";
using mozilla::gfx::IntSize from "mozilla/gfx/Point.h";
using mozilla::gfx::IntPoint from "mozilla/gfx/Point.h";

namespace mozilla {
namespace a11y {

struct AccessibleData
{
  uint64_t ID;
  uint32_t Role;
  uint32_t ChildrenCount;
  uint32_t Interfaces;
};

struct ShowEventData
{
  uint64_t ID;
  uint32_t Idx;
  AccessibleData[] NewTree;
};

struct Attribute
{
  nsCString Name;
  nsString Value;
};

struct RelationTargets
{
  uint32_t Type;
  uint64_t[] Targets;
};

prio(normal upto high) sync protocol PDocAccessible
{
  manager PBrowser;

parent:
  Shutdown();

  /*
   * Notify the parent process the document in the child process is firing an
   * event.
   */
  Event(uint64_t aID, uint32_t type);
  ShowEvent(ShowEventData data);
  HideEvent(uint64_t aRootID);
  StateChangeEvent(uint64_t aID, uint64_t aState, bool aEnabled);
  CaretMoveEvent(uint64_t aID, int32_t aOffset);

  /*
   * Tell the parent document to bind the existing document as a new child
   * document.
   */
  BindChildDoc(PDocAccessible aChildDoc, uint64_t aID);

child:
  __delete__();

  // Accessible
  prio(high) sync State(uint64_t aID) returns(uint64_t states);
  prio(high) sync Name(uint64_t aID) returns(nsString name);
  prio(high) sync Value(uint64_t aID) returns(nsString value);
  prio(high) sync Description(uint64_t aID) returns(nsString desc);
  prio(high) sync Attributes(uint64_t aID) returns(Attribute[] attributes);
  prio(high) sync RelationByType(uint64_t aID, uint32_t aRelationType)
    returns(uint64_t[] targets);
  prio(high) sync Relations(uint64_t aID) returns(RelationTargets[] relations);

  // AccessibleText

  // TextSubstring is getText in IDL.
  prio(high) sync CaretOffset(uint64_t aID) returns(int32_t aOffset);
  prio(high) sync SetCaretOffset(uint64_t aID, int32_t aOffset) returns (bool aValid);
  prio(high) sync CharacterCount(uint64_t aID) returns(int32_t aCount);
  prio(high) sync SelectionCount(uint64_t aID) returns(int32_t aCount);
  prio(high) sync TextSubstring(uint64_t aID, int32_t aStartOffset, int32_t
                                aEndOffset) returns(nsString aText, bool aValid);
  prio(high) sync GetTextAfterOffset(uint64_t aID, int32_t aOffset, int32_t aBoundaryType)
    returns(nsString aText, int32_t aStartOffset, int32_t aEndOffset);
  prio(high) sync GetTextAtOffset(uint64_t aID, int32_t aOffset, int32_t aBoundaryType)
    returns(nsString aText, int32_t aStartOffset, int32_t aEndOffset);

  prio(high) sync GetTextBeforeOffset(uint64_t aID, int32_t aOffset, int32_t aBoundaryType)
    returns(nsString aText, int32_t aStartOffset, int32_t aEndOffset);
  prio(high) sync CharAt(uint64_t aID, int32_t aOffset) returns(uint16_t aChar);

  prio(high) sync TextAttributes(uint64_t aID, bool aIncludeDefAttrs, int32_t aOffset)
    returns(Attribute[] aAttributes, int32_t aStartOffset, int32_t aEndOffset);
  prio(high) sync DefaultTextAttributes(uint64_t aID) returns(Attribute[] aAttributes);

  prio(high) sync TextBounds(uint64_t aID, int32_t aStartOffset, int32_t aEndOffset,
                             uint32_t aCoordType)
    returns(nsIntRect aRetVal);
  prio(high) sync CharBounds(uint64_t aID, int32_t aOffset, uint32_t aCoordType)
    returns(nsIntRect aRetVal);

  prio(high) sync OffsetAtPoint(uint64_t aID, int32_t aX, int32_t aY, uint32_t aCoordType)
    returns(int32_t aRetVal);

  prio(high) sync SelectionBoundsAt(uint64_t aID, int32_t aSelectionNum)
    returns(bool aSucceeded, nsString aData, int32_t aStartOffset, int32_t aEndOffset);
  prio(high) sync SetSelectionBoundsAt(uint64_t aID, int32_t aSelectionNum,
                                       int32_t aStartOffset, int32_t aEndOffset)
    returns(bool aSucceeded);
  prio(high) sync AddToSelection(uint64_t aID, int32_t aStartOffset, int32_t aEndOffset)
    returns(bool aSucceeded);
  prio(high) sync RemoveFromSelection(uint64_t aID, int32_t aSelectionNum)
    returns(bool aSucceeded);

  ScrollSubstringTo(uint64_t aID, int32_t aStartOffset, int32_t aEndOffset,
                    uint32_t aScrollType);
  ScrollSubstringToPoint(uint64_t aID,
                         int32_t aStartOffset,
                         int32_t aEndOffset,
                         uint32_t aCoordinateType,
                         int32_t aX, int32_t aY);

  prio(high) sync ReplaceText(uint64_t aID, nsString aText);
  prio(high) sync InsertText(uint64_t aID, nsString aText, int32_t aPosition)
    returns(bool aValid);
  prio(high) sync CopyText(uint64_t aID, int32_t aStartPos, int32_t aEndPos)
    returns(bool aValid);
  prio(high) sync CutText(uint64_t aID, int32_t aStartPos, int32_t aEndPos)
    returns(bool aValid);
  prio(high) sync DeleteText(uint64_t aID, int32_t aStartPos, int32_t aEndPos)
    returns(bool aValid);
  prio(high) sync PasteText(uint64_t aID, int32_t aPosition)
    returns(bool aValid);

  prio(high) sync ImagePosition(uint64_t aID, uint32_t aCoordType) returns(IntPoint aRetVal);
  prio(high) sync ImageSize(uint64_t aID) returns(IntSize aRetVal);

  prio(high) sync StartOffset(uint64_t aID) returns(uint32_t aRetVal, bool aOk);
  prio(high) sync EndOffset(uint64_t aID) returns(uint32_t aRetVal, bool aOk);
  prio(high) sync IsLinkValid(uint64_t aID) returns(bool aRetVal);
  prio(high) sync AnchorCount(uint64_t aID) returns(uint32_t aRetVal, bool aOk);
  prio(high) sync AnchorURIAt(uint64_t aID, uint32_t aIndex) returns(nsCString aURI, bool aOk);
  prio(high) sync AnchorAt(uint64_t aID, uint32_t aIndex) returns(uint64_t aIDOfAnchor, bool aOk);

  prio(high) sync LinkCount(uint64_t aID) returns(uint32_t aCount);
  prio(high) sync LinkAt(uint64_t aID, uint32_t aIndex) returns(uint64_t aIDOfLink, bool aOk);
  prio(high) sync LinkIndexOf(uint64_t aID, uint64_t aLinkID) returns(int32_t aIndex);
  prio(high) sync LinkIndexAtOffset(uint64_t aID, uint32_t aOffset) returns(int32_t aIndex);

  prio(high) sync TableOfACell(uint64_t aID) returns(uint64_t aTableID, bool aOk);
  prio(high) sync ColIdx(uint64_t aID) returns(uint32_t aIndex);
  prio(high) sync RowIdx(uint64_t aID) returns(uint32_t aIndex);
  prio(high) sync ColExtent(uint64_t aID) returns(uint32_t aExtent);
  prio(high) sync RowExtent(uint64_t aID) returns(uint32_t aExtent);
  prio(high) sync ColHeaderCells(uint64_t aID) returns(uint64_t[] aCells);
  prio(high) sync RowHeaderCells(uint64_t aID) returns(uint64_t[] aCells);
  prio(high) sync IsCellSelected(uint64_t aID) returns(bool aSelected);

  prio(high) sync TableCaption(uint64_t aID) returns(uint64_t aCaptionID, bool aOk);
  prio(high) sync TableSummary(uint64_t aID) returns(nsString aSummary);
  prio(high) sync TableColumnCount(uint64_t aID) returns(uint32_t aColCount);
  prio(high) sync TableRowCount(uint64_t aID) returns(uint32_t aRowCount);
  prio(high) sync TableCellAt(uint64_t aID, uint32_t aRow, uint32_t aCol) returns(uint64_t aCellID, bool aOk);
  prio(high) sync TableCellIndexAt(uint64_t aID, uint32_t aRow, uint32_t aCol) returns(int32_t aIndex);
  prio(high) sync TableColumnIndexAt(uint64_t aID, uint32_t aCellIndex) returns(int32_t aCol);
  prio(high) sync TableRowIndexAt(uint64_t aID, uint32_t aCellIndex) returns(int32_t aRow);
  prio(high) sync TableRowAndColumnIndicesAt(uint64_t aID, uint32_t aCellIndex) returns(int32_t aRow, int32_t aCol);
  prio(high) sync TableColumnExtentAt(uint64_t aID, uint32_t aRow, uint32_t aCol) returns(uint32_t aExtent);
  prio(high) sync TableRowExtentAt(uint64_t aID, uint32_t aRow, uint32_t aCol) returns(uint32_t aExtent);
  prio(high) sync TableColumnDescription(uint64_t aID, uint32_t aCol) returns(nsString aDescription);
  prio(high) sync TableRowDescription(uint64_t aID, uint32_t aRow) returns(nsString aDescription);
  prio(high) sync TableColumnSelected(uint64_t aID, uint32_t aCol) returns(bool aSelected);
  prio(high) sync TableRowSelected(uint64_t aID, uint32_t aRow) returns(bool aSelected);
  prio(high) sync TableCellSelected(uint64_t aID, uint32_t aRow, uint32_t aCol) returns(bool aSelected);
  prio(high) sync TableSelectedCellCount(uint64_t aID) returns(uint32_t aSelectedCells);
  prio(high) sync TableSelectedColumnCount(uint64_t aID) returns(uint32_t aSelectedColumns);
  prio(high) sync TableSelectedRowCount(uint64_t aID) returns(uint32_t aSelectedRows);
  prio(high) sync TableSelectedCells(uint64_t aID) returns(uint64_t[] aCellIDs);
  prio(high) sync TableSelectedCellIndices(uint64_t aID) returns(uint32_t[] aCellIndeces);
  prio(high) sync TableSelectedColumnIndices(uint64_t aID) returns(uint32_t[] aColumnIndeces);
  prio(high) sync TableSelectedRowIndices(uint64_t aID) returns(uint32_t[] aRowIndeces);
  prio(high) sync TableSelectColumn(uint64_t aID, uint32_t aCol);
  prio(high) sync TableSelectRow(uint64_t aID, uint32_t aRow);
  prio(high) sync TableUnselectColumn(uint64_t aID, uint32_t aCol);
  prio(high) sync TableUnselectRow(uint64_t aID, uint32_t aRow);
  prio(high) sync TableIsProbablyForLayout(uint64_t aID) returns(bool aForLayout);

  prio(high) sync SelectedItems(uint64_t aID) returns(uint64_t[] aSelectedItemIDs);
  prio(high) sync SelectedItemCount(uint64_t aID) returns(uint32_t aCount);
  prio(high) sync GetSelectedItem(uint64_t aID, uint32_t aIndex) returns(uint64_t aSelected, bool aOk);
  prio(high) sync IsItemSelected(uint64_t aID, uint32_t aIndex) returns(bool aSelected);
  prio(high) sync AddItemToSelection(uint64_t aID, uint32_t aIndex) returns(bool aSuccess);
  prio(high) sync RemoveItemFromSelection(uint64_t aID, uint32_t aIndex) returns(bool aSuccess);
  prio(high) sync SelectAll(uint64_t aID) returns(bool aSuccess);
  prio(high) sync UnselectAll(uint64_t aID) returns(bool aSuccess);

  prio(high) sync DoAction(uint64_t aID, uint8_t aIndex) returns(bool aSuccess);
  prio(high) sync ActionCount(uint64_t aID) returns(uint8_t aCount);
  prio(high) sync ActionDescriptionAt(uint64_t aID, uint8_t aIndex) returns(nsString aDescription);
  prio(high) sync ActionNameAt(uint64_t aID, uint8_t aIndex) returns(nsString aName);
  prio(high) sync AccessKey(uint64_t aID) returns(uint32_t aKey, uint32_t aModifierMask);
  prio(high) sync KeyboardShortcut(uint64_t aID) returns(uint32_t aKey, uint32_t aModifierMask);

  prio(high) sync CurValue(uint64_t aID) returns(double aValue);
  prio(high) sync SetCurValue(uint64_t aID, double aValue) returns(bool aRetVal);
  prio(high) sync MinValue(uint64_t aID) returns(double aValue);
  prio(high) sync MaxValue(uint64_t aID) returns(double aValue);
  prio(high) sync Step(uint64_t aID) returns(double aStep);

  prio(high) sync TakeFocus(uint64_t aID);
  prio(high) sync IndexOfEmbeddedChild(uint64_t aID, uint64_t aChildID)
    returns(uint32_t childIdx);
  prio(high) sync EmbeddedChildAt(uint64_t aID, uint32_t aChildIdx)
    returns(uint64_t aChild);
  prio(high) sync ChildAtPoint(uint64_t aID, int32_t aX, int32_t aY, uint32_t aWhich)
    returns(uint64_t aChild, bool aOk);
  prio(high) sync Bounds(uint64_t aID) returns(nsIntRect aRect);

  prio(high) sync Language(uint64_t aID) returns(nsString aLocale);
  prio(high) sync DocType(uint64_t aID) returns(nsString aType);
  prio(high) sync URL(uint64_t aID) returns(nsString aURL);
  prio(high) sync MimeType(uint64_t aID) returns(nsString aMime);
  prio(high) sync URLDocTypeMimeType(uint64_t aID) returns(nsString aURL, nsString aDocType, nsString aMimeType);
};

}
}
