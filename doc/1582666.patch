# HG changeset patch
# User Ryan <ryan.apilado@mail.utoronto.ca>
# Date 1573803900 18000
#      Fri Nov 15 02:45:00 2019 -0500
# Node ID 074b7d4b3c7b45727a51773816642a592590d36d
# Parent  bdb64cf16b68c4a7212ba16aef425bce66d8f4ca
Bug 1582666 - Enforce additional ES6 rules

diff --git a/.eslintrc.js b/.eslintrc.js
--- a/.eslintrc.js
+++ b/.eslintrc.js
@@ -131,27 +131,18 @@ module.exports = {
       "netwerk/test/unit*/**",
     ],
     "rules": {
-      "mozilla/consistent-if-bracing": "off",
-      "mozilla/reject-importGlobalProperties": "off",
       "mozilla/no-arbitrary-setTimeout": "off",
       "mozilla/no-define-cc-etc": "off",
-      "mozilla/use-default-preference-values": "off",
       "mozilla/use-services": "off",
       "consistent-return": "off",
-      "no-array-constructor": "off",
       "no-eval": "off",
       "no-global-assign": "off",
       "no-nested-ternary": "off",
-      "no-new-wrappers": "off",
       "no-redeclare": "off",
-      "no-return-await": "off",
-      "no-sequences": "off",
       "no-shadow": "off",
       "no-throw-literal": "off",
       "no-undef": "off",
-      "no-unreachable": "off",
       "no-unused-vars": "off",
-      "no-useless-return": "off",
     }
   }, {
     "files": [
diff --git a/netwerk/test/unit/head_cache2.js b/netwerk/test/unit/head_cache2.js
--- a/netwerk/test/unit/head_cache2.js
+++ b/netwerk/test/unit/head_cache2.js
@@ -1,4 +1,4 @@
-var callbacks = new Array();
+var callbacks = [];
 
 // Expect an existing entry
 const NORMAL = 0;
diff --git a/netwerk/test/unit/test_1073747.js b/netwerk/test/unit/test_1073747.js
--- a/netwerk/test/unit/test_1073747.js
+++ b/netwerk/test/unit/test_1073747.js
@@ -21,8 +21,7 @@ var test = function(s, funcName) {
     Assert.ok(true); // make sure it throws an exception instead of crashing
     return x;
   }
-  // should always have an exception to catch
-  Assert.ok(false);
+  // code should never reach here, should always have an exception to catch
 };
 var s = null;
 var funcs = [
diff --git a/netwerk/test/unit/test_XHR_redirects.js b/netwerk/test/unit/test_XHR_redirects.js
--- a/netwerk/test/unit/test_XHR_redirects.js
+++ b/netwerk/test/unit/test_XHR_redirects.js
@@ -9,8 +9,6 @@ const { Preferences } = ChromeUtils.impo
   "resource://gre/modules/Preferences.jsm"
 );
 
-Cu.importGlobalProperties(["XMLHttpRequest"]);
-
 var sSame;
 var sOther;
 var sRedirectPromptPref;
diff --git a/netwerk/test/unit/test_authentication.js b/netwerk/test/unit/test_authentication.js
--- a/netwerk/test/unit/test_authentication.js
+++ b/netwerk/test/unit/test_authentication.js
@@ -3,8 +3,6 @@
 
 const { HttpServer } = ChromeUtils.import("resource://testing-common/httpd.js");
 
-Cu.importGlobalProperties(["XMLHttpRequest"]);
-
 // Turn off the authentication dialog blocking for this test.
 var prefs = Cc["@mozilla.org/preferences-service;1"].getService(
   Ci.nsIPrefBranch
diff --git a/netwerk/test/unit/test_bug1177909.js b/netwerk/test/unit/test_bug1177909.js
--- a/netwerk/test/unit/test_bug1177909.js
+++ b/netwerk/test/unit/test_bug1177909.js
@@ -55,17 +55,19 @@ async function TestProxyType(chan, flags
     Ci.nsIProtocolProxyService.PROXYCONFIG_SYSTEM
   );
 
-  return await new Promise((resolve, reject) => {
+  const retval = await new Promise((resolve, reject) => {
     gProxyService.asyncResolve(chan, flags, {
       onProxyAvailable(req, uri, pi, status) {
         resolve(pi);
       },
     });
   });
+  return retval;
 }
 
 async function TestProxyTypeByURI(uri) {
-  return await TestProxyType(makeChannel(uri), 0);
+  const retval = await TestProxyType(makeChannel(uri), 0);
+  return retval;
 }
 
 add_task(async function testHttpProxy() {
diff --git a/netwerk/test/unit/test_bug1312774_http1.js b/netwerk/test/unit/test_bug1312774_http1.js
--- a/netwerk/test/unit/test_bug1312774_http1.js
+++ b/netwerk/test/unit/test_bug1312774_http1.js
@@ -98,7 +98,7 @@ HttpResponseListener.prototype = {
   },
 };
 
-var responseQueue = new Array();
+var responseQueue = [];
 function setup_http_server() {
   log("setup_http_server");
   var prefs = Cc["@mozilla.org/preferences-service;1"].getService(
diff --git a/netwerk/test/unit/test_bug1312782_http1.js b/netwerk/test/unit/test_bug1312782_http1.js
--- a/netwerk/test/unit/test_bug1312782_http1.js
+++ b/netwerk/test/unit/test_bug1312782_http1.js
@@ -113,7 +113,7 @@ function check_response_id(responses, ma
   }
 }
 
-var responseQueue = new Array();
+var responseQueue = [];
 function setup_http_server() {
   log("setup_http_server");
   var prefs = Cc["@mozilla.org/preferences-service;1"].getService(
diff --git a/netwerk/test/unit/test_bug1355539_http1.js b/netwerk/test/unit/test_bug1355539_http1.js
--- a/netwerk/test/unit/test_bug1355539_http1.js
+++ b/netwerk/test/unit/test_bug1355539_http1.js
@@ -24,8 +24,8 @@ server.start(-1);
 var baseURL = "http://localhost:" + server.identity.primaryPort + "/";
 var maxConnections = 0;
 var debug = false;
-var dummyResponseQueue = new Array();
-var responseQueue = new Array();
+var dummyResponseQueue = [];
+var responseQueue = [];
 
 function log(msg) {
   if (!debug) {
diff --git a/netwerk/test/unit/test_bug1378385_http1.js b/netwerk/test/unit/test_bug1378385_http1.js
--- a/netwerk/test/unit/test_bug1378385_http1.js
+++ b/netwerk/test/unit/test_bug1378385_http1.js
@@ -127,7 +127,7 @@ function check_response_id(responses, wi
   }
 }
 
-var responseQueue = new Array();
+var responseQueue = [];
 function setup_http_server() {
   log("setup_http_server");
   var prefs = Cc["@mozilla.org/preferences-service;1"].getService(
diff --git a/netwerk/test/unit/test_bug1411316_http1.js b/netwerk/test/unit/test_bug1411316_http1.js
--- a/netwerk/test/unit/test_bug1411316_http1.js
+++ b/netwerk/test/unit/test_bug1411316_http1.js
@@ -79,7 +79,7 @@ HttpResponseListener.prototype = {
   },
 };
 
-var responseQueue = new Array();
+var responseQueue = [];
 function setup_http_server() {
   log("setup_http_server");
   var prefs = Cc["@mozilla.org/preferences-service;1"].getService(
diff --git a/netwerk/test/unit/test_bug396389.js b/netwerk/test/unit/test_bug396389.js
--- a/netwerk/test/unit/test_bug396389.js
+++ b/netwerk/test/unit/test_bug396389.js
@@ -45,9 +45,7 @@ function run_test() {
     Ci.nsIPrefBranch
   );
   for (var pref of prefData) {
-    try {
-      pref.oldVal = prefs.getBoolPref(pref.name);
-    } catch (e) {}
+    pref.oldVal = prefs.getBoolPref(pref.name);
     prefs.setBoolPref(pref.name, pref.newVal);
   }
 
diff --git a/netwerk/test/unit/test_bug650995.js b/netwerk/test/unit/test_bug650995.js
--- a/netwerk/test/unit/test_bug650995.js
+++ b/netwerk/test/unit/test_bug650995.js
@@ -144,22 +144,22 @@ function TestCacheEntrySize(
     secondExpectedReply = repeatToLargerThan1K(secondExpectedReply);
   }
 
-  (this.start = function() {
+  this.start = function() {
     setSizeFunc();
     var channel = setupChannel("/bug650995", firstRequest);
     channel.asyncOpen(new ChannelListener(this.initialLoad, this));
-  }),
-    (this.initialLoad = function(request, data, ctx) {
-      Assert.equal(firstRequest, data);
-      var channel = setupChannel("/bug650995", secondRequest);
-      executeSoon(function() {
-        channel.asyncOpen(new ChannelListener(ctx.testAndTriggerNext, ctx));
-      });
-    }),
-    (this.testAndTriggerNext = function(request, data, ctx) {
-      Assert.equal(secondExpectedReply, data);
-      executeSoon(nextTest);
+  };
+  this.initialLoad = function(request, data, ctx) {
+    Assert.equal(firstRequest, data);
+    var channel = setupChannel("/bug650995", secondRequest);
+    executeSoon(function() {
+      channel.asyncOpen(new ChannelListener(ctx.testAndTriggerNext, ctx));
     });
+  };
+  this.testAndTriggerNext = function(request, data, ctx) {
+    Assert.equal(secondExpectedReply, data);
+    executeSoon(nextTest);
+  };
 }
 
 function run_test() {
diff --git a/netwerk/test/unit/test_chunked_responses.js b/netwerk/test/unit/test_chunked_responses.js
--- a/netwerk/test/unit/test_chunked_responses.js
+++ b/netwerk/test/unit/test_chunked_responses.js
@@ -24,7 +24,7 @@ XPCOMUtils.defineLazyGetter(this, "URL",
 
 var httpserver = new HttpServer();
 var index = 0;
-var test_flags = new Array();
+var test_flags = [];
 var testPathBase = "/chunked_hdrs";
 
 function run_test() {
diff --git a/netwerk/test/unit/test_content_length_underrun.js b/netwerk/test/unit/test_content_length_underrun.js
--- a/netwerk/test/unit/test_content_length_underrun.js
+++ b/netwerk/test/unit/test_content_length_underrun.js
@@ -13,7 +13,7 @@ XPCOMUtils.defineLazyGetter(this, "URL",
 
 var httpserver = new HttpServer();
 var index = 0;
-var test_flags = new Array();
+var test_flags = [];
 var testPathBase = "/cl_hdrs";
 
 var prefs;
diff --git a/netwerk/test/unit/test_duplicate_headers.js b/netwerk/test/unit/test_duplicate_headers.js
--- a/netwerk/test/unit/test_duplicate_headers.js
+++ b/netwerk/test/unit/test_duplicate_headers.js
@@ -14,7 +14,7 @@ XPCOMUtils.defineLazyGetter(this, "URL",
 
 var httpserver = new HttpServer();
 var index = 0;
-var test_flags = new Array();
+var test_flags = [];
 var testPathBase = "/dupe_hdrs";
 
 function run_test() {
diff --git a/netwerk/test/unit/test_eviction.js b/netwerk/test/unit/test_eviction.js
--- a/netwerk/test/unit/test_eviction.js
+++ b/netwerk/test/unit/test_eviction.js
@@ -240,7 +240,7 @@ function check_remaining_cookies(aNumber
 
     if (aNumberTotal != aNumberToExpect) {
       // make sure the cookie is one of the batch we expect was purged.
-      var hostNumber = new Number(cookie.rawHost.split(".")[1]);
+      var hostNumber = Number(cookie.rawHost.split(".")[1]);
       if (hostNumber < aNumberOld - aNumberToExpect) {
         break;
       }
diff --git a/netwerk/test/unit/test_headers.js b/netwerk/test/unit/test_headers.js
--- a/netwerk/test/unit/test_headers.js
+++ b/netwerk/test/unit/test_headers.js
@@ -30,7 +30,7 @@ XPCOMUtils.defineLazyGetter(this, "URL",
 var httpserver = new HttpServer();
 var index = 0;
 var nextTest = firstTest;
-var test_flags = new Array();
+var test_flags = [];
 var testPathBase = "/test_headers";
 
 function run_test() {
diff --git a/netwerk/test/unit/test_http2.js b/netwerk/test/unit/test_http2.js
--- a/netwerk/test/unit/test_http2.js
+++ b/netwerk/test/unit/test_http2.js
@@ -1,7 +1,5 @@
 // test HTTP/2
 
-Cu.importGlobalProperties(["XMLHttpRequest"]);
-
 // Generate a small and a large post with known pre-calculated md5 sums
 function generateContent(size) {
   var content = "";
diff --git a/netwerk/test/unit/test_httpauth.js b/netwerk/test/unit/test_httpauth.js
--- a/netwerk/test/unit/test_httpauth.js
+++ b/netwerk/test/unit/test_httpauth.js
@@ -60,9 +60,9 @@ function run_test() {
     Assert.equal(pass.value, kPassword);
 
     // make sure the added auth entry is no longer accessible in private
-    (domain = { value: kEmpty }),
-      (user = { value: kEmpty }),
-      (pass = { value: kEmpty });
+    domain = { value: kEmpty };
+    user = { value: kEmpty };
+    pass = { value: kEmpty };
     try {
       // should throw
       am.getAuthIdentity(
@@ -100,9 +100,9 @@ function run_test() {
       PRIVATE
     );
     // make sure the recently added auth entry is available inside the private browsing mode
-    (domain = { value: kEmpty }),
-      (user = { value: kEmpty }),
-      (pass = { value: kEmpty });
+    domain = { value: kEmpty };
+    user = { value: kEmpty };
+    pass = { value: kEmpty };
     am.getAuthIdentity(
       kHTTP,
       kHost2,
@@ -121,9 +121,9 @@ function run_test() {
 
     try {
       // make sure the recently added auth entry is not available outside the private browsing mode
-      (domain = { value: kEmpty }),
-        (user = { value: kEmpty }),
-        (pass = { value: kEmpty });
+      domain = { value: kEmpty };
+      user = { value: kEmpty };
+      pass = { value: kEmpty };
       am.getAuthIdentity(
         kHTTP,
         kHost2,
@@ -149,9 +149,9 @@ function run_test() {
     Services.obs.notifyObservers(null, "last-pb-context-exited");
 
     // make sure the added auth entry is no longer accessible in any privacy state
-    (domain = { value: kEmpty }),
-      (user = { value: kEmpty }),
-      (pass = { value: kEmpty });
+    domain = { value: kEmpty };
+    user = { value: kEmpty };
+    pass = { value: kEmpty };
     try {
       // should throw (not available in public mode)
       am.getAuthIdentity(
diff --git a/netwerk/test/unit/test_localstreams.js b/netwerk/test/unit/test_localstreams.js
--- a/netwerk/test/unit/test_localstreams.js
+++ b/netwerk/test/unit/test_localstreams.js
@@ -58,7 +58,6 @@ function test_stream(stream) {
 
     numread += avail;
   }
-  return numread;
 }
 
 function stream_for_file(file) {
diff --git a/netwerk/test/unit/test_plaintext_sniff.js b/netwerk/test/unit/test_plaintext_sniff.js
--- a/netwerk/test/unit/test_plaintext_sniff.js
+++ b/netwerk/test/unit/test_plaintext_sniff.js
@@ -187,24 +187,20 @@ function makeHandler(headerIdx, bodyIdx)
 var httpserv;
 function run_test() {
   // disable again for everything for now (causes sporatic oranges)
-  return;
-
+  // comment everything out to comply with eslint
+  // return;
   // disable on Windows for now, because it seems to leak sockets and die.
   // Silly operating system!
   // This is a really nasty way to detect Windows.  I wish we could do better.
-  if (mozinfo.os == "win") {
-    //failing eslint no-empty test
-  }
-
-  httpserv = new HttpServer();
-
-  for (i = 0; i < contentTypeHeaderList.length; ++i) {
-    for (j = 0; j < bodyList.length; ++j) {
-      httpserv.registerPathHandler("/" + i + "/" + j, makeHandler(i, j));
-    }
-  }
-
-  httpserv.start(-1);
-
-  doTest(0, 0);
+  //if (mozinfo.os == "win") {
+  //  failing eslint no-empty test
+  //}
+  //httpserv = new HttpServer();
+  //for (i = 0; i < contentTypeHeaderList.length; ++i) {
+  //  for (j = 0; j < bodyList.length; ++j) {
+  //    httpserv.registerPathHandler("/" + i + "/" + j, makeHandler(i, j));
+  //  }
+  //}
+  //httpserv.start(-1);
+  //doTest(0, 0);
 }
diff --git a/netwerk/test/unit/test_redirect_from_script.js b/netwerk/test/unit/test_redirect_from_script.js
--- a/netwerk/test/unit/test_redirect_from_script.js
+++ b/netwerk/test/unit/test_redirect_from_script.js
@@ -25,8 +25,6 @@
 
 const { HttpServer } = ChromeUtils.import("resource://testing-common/httpd.js");
 
-Cu.importGlobalProperties(["XMLHttpRequest"]);
-
 // the topic we observe to use the API.  http-on-opening-request might also
 // work for some purposes.
 redirectHook = "http-on-modify-request";
diff --git a/netwerk/test/unit/test_redirect_from_script_after-open_passing.js b/netwerk/test/unit/test_redirect_from_script_after-open_passing.js
--- a/netwerk/test/unit/test_redirect_from_script_after-open_passing.js
+++ b/netwerk/test/unit/test_redirect_from_script_after-open_passing.js
@@ -25,8 +25,6 @@
 
 const { HttpServer } = ChromeUtils.import("resource://testing-common/httpd.js");
 
-Cu.importGlobalProperties(["XMLHttpRequest"]);
-
 // the topic we observe to use the API.  http-on-opening-request might also
 // work for some purposes.
 redirectHook = "http-on-examine-response";
diff --git a/netwerk/test/unit/test_reentrancy.js b/netwerk/test/unit/test_reentrancy.js
--- a/netwerk/test/unit/test_reentrancy.js
+++ b/netwerk/test/unit/test_reentrancy.js
@@ -1,7 +1,5 @@
 const { HttpServer } = ChromeUtils.import("resource://testing-common/httpd.js");
 
-Cu.importGlobalProperties(["XMLHttpRequest"]);
-
 XPCOMUtils.defineLazyGetter(this, "URL", function() {
   return "http://localhost:" + httpserver.identity.primaryPort;
 });
diff --git a/netwerk/test/unit/test_xmlhttprequest.js b/netwerk/test/unit/test_xmlhttprequest.js
--- a/netwerk/test/unit/test_xmlhttprequest.js
+++ b/netwerk/test/unit/test_xmlhttprequest.js
@@ -1,7 +1,5 @@
 const { HttpServer } = ChromeUtils.import("resource://testing-common/httpd.js");
 
-Cu.importGlobalProperties(["XMLHttpRequest"]);
-
 var httpserver = new HttpServer();
 var testpath = "/simple";
 var httpbody = "<?xml version='1.0' ?><root>0123456789</root>";
