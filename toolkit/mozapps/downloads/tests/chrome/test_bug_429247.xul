<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/.  -->
<!--
 * Test bug 429247 to make sure clicking on whitespace in the Download
 * Manager doesn't run the default action on the selected download.
-->

<window title="Download Manager Test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">

  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"/>
  <script type="application/javascript"
          src="utils.js"/>

  <script type="application/javascript">
  <![CDATA[

function test()
{
  var dmui = getDMUI();
  if (!dmui) {
    todo(false, "skip test for toolkit download manager UI");
    return;
  }

  let ios = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService);
  let dmFile = Cc["@mozilla.org/file/directory_service;1"].
               getService(Ci.nsIProperties).get("TmpD", Ci.nsIFile);
  dmFile.append("dm-ui-test.file");
  dmFile.createUnique(Ci.nsIFile.NORMAL_FILE_TYPE, 0666);
  let gTestPath = ios.newFileURI(dmFile).spec;

  // Data to populate the download manager with
  const DownloadData = {
    name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859239,
    state: Ci.nsIDownloadManager.DOWNLOAD_FINISHED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0
  }

  let dm = Cc["@mozilla.org/download-manager;1"].
           getService(Ci.nsIDownloadManager);
  let db = dm.DBConnection;

  // Empty any old downloads
  db.executeSimpleSQL("DELETE FROM moz_downloads");

  let stmt = db.createStatement(
    "INSERT INTO moz_downloads (name, source, target, startTime, endTime, " +
      "state, currBytes, maxBytes, preferredAction, autoResume) " +
    "VALUES (:name, :source, :target, :startTime, :endTime, :state, " +
      ":currBytes, :maxBytes, :preferredAction, :autoResume)");
  for (let prop in DownloadData)
    stmt.params[prop] = DownloadData[prop];

  stmt.execute();
  stmt.finalize();

  // Close the UI if necessary
  let wm = Cc["@mozilla.org/appshell/window-mediator;1"].
           getService(Ci.nsIWindowMediator);
  let win = wm.getMostRecentWindow("Download:Manager");
  if (win) win.close();

  let obs = Cc["@mozilla.org/observer-service;1"].
            getService(Ci.nsIObserverService);
  const DLMGR_UI_DONE = "download-manager-ui-done";

  let testObs = {
    observe: function(aSubject, aTopic, aData) {
      if (aTopic != DLMGR_UI_DONE)
        return;

      let win = aSubject.QueryInterface(Ci.nsIDOMWindow);
      win.focus();
      let $ = function(aId) win.document.getElementById(aId);
      let downloadView = $("downloadView");

      // Default test/check for invocations
      let invokeCount = 0;
      let counter = function() invokeCount++;

      // Array of tests that consist of the download manager
      // function to temporarily replace, method to use in its place, value to
      // use when checking correctness
      let defaultForSelectedTest = ["doDefaultForSelected", counter, counter];

      // All the expected results
      let allExpected = [0, "The default action was not performed"];

      // Select the first download
      downloadView.selectedIndex = 0;

      let [func, test, value] = defaultForSelectedTest;
      // Make a copy of the original function and replace it with a test
      let copy = win[func];
      win[func] = test;

      // Get the offsetY of the whitespace under the download
      let downloadItem = downloadView.getItemAtIndex(0);
      let boxOffset = downloadItem.boxObject.height + 1;
      // The last download in the download manager + 1 is whitespace
      synthesizeMouse(downloadItem, 0, boxOffset, {clickCount: 2}, win);

      // Make sure the value is as expected
      let [correct, message] = allExpected;
      ok(value() == correct, message);

      // Restore original values
      invokeCount = 0;
      win[func] = copy;

      // We're done!
      win.close();
      obs.removeObserver(testObs, DLMGR_UI_DONE);
      SimpleTest.finish();
    }
  };
  obs.addObserver(testObs, DLMGR_UI_DONE, false);

  // Show the Download Manager UI
  dmui.show();

  SimpleTest.waitForExplicitFinish();
}

  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
</window>
