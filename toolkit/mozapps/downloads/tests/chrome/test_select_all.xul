<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/.  -->
<!--
 * Test bug 429614 to make sure ctrl/cmd-a work to select all downloads and
 * hitting delete removes them all.
-->

<window title="Download Manager Test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">

  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"/>
  <script type="application/javascript"
          src="utils.js"/>

  <script type="application/javascript">
  <![CDATA[

function test()
{
  var dmui = getDMUI();
  if (!dmui) {
    todo(false, "skip test for toolkit download manager UI");
    return;
  }

  let dm = Cc["@mozilla.org/download-manager;1"].
           getService(Ci.nsIDownloadManager);
  let db = dm.DBConnection;

  // Empty any old downloads
  db.executeSimpleSQL("DELETE FROM moz_downloads");

  // Make a file name for the downloads
  let file = Cc["@mozilla.org/file/directory_service;1"].
             getService(Ci.nsIProperties).get("TmpD", Ci.nsIFile);
  file.append("selectAll");
  let filePath = Cc["@mozilla.org/network/io-service;1"].
                 getService(Ci.nsIIOService).newFileURI(file).spec;

  let stmt = db.createStatement(
    "INSERT INTO moz_downloads (target, source, state) " +
    "VALUES (?1, ?2, ?3)");

  let sites = ["mozilla.org", "mozilla.com", "select.all"];
  try {
    for each (let site in sites) {
      stmt.bindByIndex(0, filePath);
      stmt.bindByIndex(1, "http://" + site + "/file");
      stmt.bindByIndex(2, dm.DOWNLOAD_FINISHED);

      // Add it!
      stmt.execute();
    }
  }
  finally {
    stmt.reset();
    stmt.finalize();
  }

  // Close the UI if necessary
  let wm = Cc["@mozilla.org/appshell/window-mediator;1"].
           getService(Ci.nsIWindowMediator);
  let win = wm.getMostRecentWindow("Download:Manager");
  if (win) win.close();

  let obs = Cc["@mozilla.org/observer-service;1"].
            getService(Ci.nsIObserverService);
  const DLMGR_UI_DONE = "download-manager-ui-done";

  let testObs = {
    observe: function(aSubject, aTopic, aData) {
      if (aTopic != DLMGR_UI_DONE)
        return;

      SimpleTest.waitForFocus(function () { checkSelectAndRemove(aSubject) }, aSubject);
    }
  };

  var checkSelectAndRemove = function(win)
  {
    let $ = function(aId) win.document.getElementById(aId);
    let downloadView = $("downloadView");
    is(downloadView.itemCount, sites.length, "All downloads displayed");

    // Select all downloads
    let isMac = navigator.platform.search("Mac") == 0;
    synthesizeKey("a", { metaKey: isMac, ctrlKey: !isMac }, win);
    is(downloadView.selectedCount, sites.length, "All downloads selected");

    // Delete all downloads
    synthesizeKey("VK_DELETE", {}, win);
    is(downloadView.itemCount, 0, "All downloads removed");

    // We're done!
    win.close();
    obs.removeObserver(testObs, DLMGR_UI_DONE);
    SimpleTest.finish();
  }

  obs.addObserver(testObs, DLMGR_UI_DONE, false);

  // Show the Download Manager UI
  dmui.show();

  SimpleTest.waitForExplicitFinish();
}

  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
</window>
