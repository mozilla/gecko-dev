/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


#include "nsISupports.idl"

interface nsILoginInfo;
interface nsIDOMElement;
interface nsIDOMWindow;

[scriptable, uuid(425f73b9-b2db-4e8a-88c5-9ac2512934ce)]
interface nsILoginManagerPrompter : nsISupports {
  /**
   * Initialize the prompter. Must be called before using other interfaces.
   *
   * @param aWindow
   *        The window in which the user is doing some login-related action that's
   *        resulting in a need to prompt them for something. The prompt
   *        will be associated with this window (or, if a notification bar
   *        is being used, topmost opener in some cases).
   *
   *        aWindow can be null if there is no associated window, e.g. in a JSM
   *        or Sandbox. In this case there will be no checkbox to save the login
   *        since the window is needed to know if this is a private context.
   *
   *        If this window is a content window, the corresponding window and browser
   *        elements will be calculated. If this window is a chrome window, the
   *        corresponding browser element needs to be set using setBrowser.
   */
  void init(in nsIDOMWindow aWindow);

  /**
   * The browser this prompter is being created for.
   * This is required if the init function received a chrome window as argument.
   */
  attribute nsIDOMElement browser;

  /**
   * The opener that was used to open the window passed to init.
   * The opener can be used to determine in which window the prompt
   * should be shown. Must be a content window that is not a frame window,
   * make sure to pass the top window using e.g. window.top.
   */
  attribute nsIDOMWindow opener;

  /**
   * Ask the user if they want to save a login (Yes, Never, Not Now)
   *
   * @param aLogin
   *        The login to be saved.
   */
  void promptToSavePassword(in nsILoginInfo aLogin);

  /**
   * Ask the user if they want to change a login's password or username.
   * If the user consents, modifyLogin() will be called.
   *
   * @param aOldLogin
   *        The existing login (with the old password).
   * @param aNewLogin
   *        The new login.
   */
  void promptToChangePassword(in nsILoginInfo aOldLogin,
                              in nsILoginInfo aNewLogin);

  /**
   * Ask the user if they want to change the password for one of
   * multiple logins, when the caller can't determine exactly which
   * login should be changed. If the user consents, modifyLogin() will
   * be called.
   *
   * @param logins
   *        An array of existing logins.
   * @param count
   *        (length of the array)
   * @param aNewLogin
   *        The new login.
   *
   * Note: Because the caller does not know the username of the login
   *       to be changed, aNewLogin.username and aNewLogin.usernameField
   *       will be set (using the user's selection) before modifyLogin()
   *       is called.
   */
  void promptToChangePasswordWithUsernames(
          [array, size_is(count)] in nsILoginInfo logins,
          in uint32_t count,
          in nsILoginInfo aNewLogin);
};
%{C++

#define NS_LOGINMANAGERPROMPTER_CONTRACTID "@mozilla.org/login-manager/prompter/;1"

%}
