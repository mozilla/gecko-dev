<?xml version="1.0"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<?xml-stylesheet href="chrome://global/skin" type="text/css"?>

<window id="451286test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        width="600"
        height="600"
        onload="SimpleTest.executeSoon(startTest);"
        title="451286 test (also tests bug 493658)">

  <script type="application/javascript"><![CDATA[
    const Ci = Components.interfaces;
    const Cc = Components.classes;
    const Cr = Components.results;
    const SEARCH_TEXT = "text";
    const DATAURI = "data:text/html," + SEARCH_TEXT;

    let {Task} = Components.utils.import("resource://gre/modules/Task.jsm", {});

    var gFindBar = null;
    var gBrowser;
    var gWin;

    var noHighlightSnapshot;
    var findSnapshot;

    var imports = ["SimpleTest", "ok", "snapshotWindow", "compareSnapshots",
                   "parentFinish"];
    for each (var name in imports) {
      window[name] = window.opener.wrappedJSObject[name];
    }

    function finish() {
      window.close();
      parentFinish();
    }

    function startTest() {
      gFindBar = document.getElementById("FindToolbar");
      gBrowser = document.getElementById("content");
      gBrowser.addEventListener("pageshow", onPageShow, false);

      // Bug 451286. An iframe that should be highlighted
      var visible = "<iframe id='visible' src='" + DATAURI + "'></iframe>";

      // Bug 493658. An invisible iframe that shouldn't interfere with
      // highlighting matches lying after it in the document
      var invisible = "<iframe id='invisible' style='display: none;' " +
                      "src='" + DATAURI + "'></iframe>";

      var uri = DATAURI + invisible + SEARCH_TEXT + visible + SEARCH_TEXT;
      gBrowser.loadURI(uri);
    }

    // This test is comparing snapshots. It is necessary to wait for the findbar
    // to close before taking the snapshot so the findbar does not take up space
    // on the new snapshot.
    function closeFindbarAndWait() {
      return new Promise((resolve) => {
        gFindBar.addEventListener("transitionend", function cont(aEvent) {
          if (aEvent.propertyName != "visibility") {
            return;
          }
          gFindBar.removeEventListener("transitionend", cont);
          resolve();
        });
        gFindBar.close();
      });
    }

    function toggleHighlightAndWait(aHighlight) {
      return new Promise((resolve) => {
        let listener = {
          onHighlightFinished: function() {
            gFindBar.browser.finder.removeResultListener(listener);
            resolve();
          }
        };
        gFindBar.browser.finder.addResultListener(listener);
        gFindBar.toggleHighlight(aHighlight);
      });
    }

    let onPageShow = Task.async(function* (aEvent) {
      // Don't respond to pageshow events coming from the <iframes>
      if (aEvent.target != gBrowser.contentDocument)
        return;

      gBrowser.removeEventListener("pageshow", onPageShow, false);

      // First, take a snapshot of the window without highlighting
      // to be used later to test the unhighlighting case
      gWin = gBrowser.contentWindow;
      noHighlightSnapshot = snapshotWindow(gWin);

      yield part1();
      yield part2();
      yield part3();

      finish();
    });

    let part1 = Task.async(function* () {
      gFindBar.open();
      gFindBar._findField.value = SEARCH_TEXT;
      var matchCase = gFindBar.getElement("find-case-sensitive");
      if (matchCase.checked)
        matchCase.doCommand();

      // Turn on highlighting
      yield toggleHighlightAndWait(true);
      yield closeFindbarAndWait();
    });

    let part2 = Task.async(function* () {
      // Take snapshot of highlighting
      findSnapshot = snapshotWindow(gWin);

      // Now, remove the highlighting, and take a snapshot to compare
      // to our original state
      gFindBar.open();
      yield toggleHighlightAndWait(false);
      yield closeFindbarAndWait();
    });

    let part3 = Task.async(function* () {
      var unhighlightSnapshot = snapshotWindow(gWin);

      // Select the matches that should have been highlighted manually
      var doc = gBrowser.contentDocument;

      // Create a manual highlight in the visible iframe to test bug 451286
      var iframe = doc.getElementById("visible");
      var ifBody = iframe.contentDocument.body;
      var range = iframe.contentDocument.createRange();
      range.selectNodeContents(ifBody.childNodes[0]);
      var ifWindow = iframe.contentWindow;
      var ifDocShell = ifWindow.QueryInterface(Ci.nsIInterfaceRequestor)
                               .getInterface(Ci.nsIWebNavigation)
                               .QueryInterface(Ci.nsIDocShell);

      var ifController = ifDocShell.QueryInterface(Ci.nsIInterfaceRequestor)
                                   .getInterface(Ci.nsISelectionDisplay)
                                   .QueryInterface(Ci.nsISelectionController);

      var frameFindSelection =
        ifController.getSelection(ifController.SELECTION_FIND);
      frameFindSelection.addRange(range);

      // Create manual highlights in the main document (the matches that lie
      // before/after the iframes
      var docShell = gWin.QueryInterface(Ci.nsIInterfaceRequestor)
                         .getInterface(Ci.nsIWebNavigation)
                          .QueryInterface(Ci.nsIDocShell);

      var controller = docShell.QueryInterface(Ci.nsIInterfaceRequestor)
                               .getInterface(Ci.nsISelectionDisplay)
                               .QueryInterface(Ci.nsISelectionController);

      var docFindSelection =
        controller.getSelection(ifController.SELECTION_FIND);

      range = doc.createRange();
      range.selectNodeContents(doc.body.childNodes[0]);
      docFindSelection.addRange(range);
      range = doc.createRange();
      range.selectNodeContents(doc.body.childNodes[2]);
      docFindSelection.addRange(range);
      range = doc.createRange();
      range.selectNodeContents(doc.body.childNodes[4]);
      docFindSelection.addRange(range);

      // Take snapshot of manual highlighting
      var manualSnapshot = snapshotWindow(gBrowser.contentWindow);

      // Test 1: Were the matches in iframe correctly highlighted?
      var res = compareSnapshots(findSnapshot, manualSnapshot, true);
      ok(res[0], "Matches found in iframe correctly highlighted");

      // Test 2: Were the matches in iframe correctly unhighlighted?
      res = compareSnapshots(noHighlightSnapshot, unhighlightSnapshot, true);
      ok(res[0], "Highlighting in iframe correctly removed");
    });
  ]]></script>

  <browser type="content-primary" flex="1" id="content" src="about:blank"/>
  <findbar id="FindToolbar" browserid="content"/>
</window>
