<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->


<!DOCTYPE bindings [
<!ENTITY % notificationDTD SYSTEM "chrome://global/locale/notification.dtd">
%notificationDTD;
]>

<bindings id="notificationBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html = "http://www.w3.org/1999/xhtml">

  <binding id="notification">
    <content>
      <xul:hbox anonid="details" align="center" flex="1"
                oncommand="this.parentNode._doButtonCommand(event);">
        <xul:image anonid="messageImage" class="messageImage" xbl:inherits="src=image,type,value"/>
        <xul:description anonid="messageText" class="messageText" flex="1" xbl:inherits="xbl:text=label"/>
        <xul:spacer flex="1"/>
        <children/>
      </xul:hbox>
      <xul:toolbarbutton ondblclick="event.stopPropagation();"
                         class="messageCloseButton close-icon tabbable"
                         anonid="close-button"
                         xbl:inherits="hidden=hideclose"
                         tooltiptext="&closeNotification.tooltip;"
                         oncommand="document.getBindingParent(this).dismiss();"/>
    </content>
    <implementation>
      <property name="label" onset="this.setAttribute('label', val); return val;"
                             onget="return this.getAttribute('label');"/>
      <property name="value" onset="this.setAttribute('value', val); return val;"
                             onget="return this.getAttribute('value');"/>
      <property name="image" onset="this.setAttribute('image', val); return val;"
                             onget="return this.getAttribute('image');"/>
      <property name="type" onset="this.setAttribute('type', val); return val;"
                            onget="return this.getAttribute('type');"/>
      <property name="priority" onget="return parseInt(this.getAttribute('priority')) || 0;"
                                onset="this.setAttribute('priority', val); return val;"/>
      <property name="persistence" onget="return parseInt(this.getAttribute('persistence')) || 0;"
                                   onset="this.setAttribute('persistence', val); return val;"/>
      <field name="timeout">0</field>

      <property name="control" readonly="true">
        <getter>
          <![CDATA[
            return this.closest(".notificationbox-stack")._notificationBox;
          ]]>
        </getter>
      </property>

      <!-- This method should only be called when the user has
           manually closed the notification. If you want to
           programmatically close the notification, you should
           call close() instead. -->
      <method name="dismiss">
        <body>
          <![CDATA[
            if (this.eventCallback) {
              this.eventCallback("dismissed");
            }
            this.close();
          ]]>
        </body>
      </method>

      <method name="close">
        <body>
          <![CDATA[
            var control = this.control;
            if (control)
              control.removeNotification(this);
            else
              this.hidden = true;
          ]]>
        </body>
      </method>

      <method name="_doButtonCommand">
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            if (!("buttonInfo" in aEvent.target))
              return;

            var button = aEvent.target.buttonInfo;
            if (button.popup) {
              document.getElementById(button.popup).
                openPopup(aEvent.originalTarget, "after_start", 0, 0, false, false, aEvent);
              aEvent.stopPropagation();
            } else {
              var callback = button.callback;
              if (callback) {
                var result = callback(this, button, aEvent.target, aEvent);
                if (!result)
                  this.close();
                aEvent.stopPropagation();
              }
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="popup-notification">
    <content orient="vertical">
      <xul:hbox class="popup-notification-header-container">
        <children includes="popupnotificationheader"/>
      </xul:hbox>
      <xul:hbox align="start" class="popup-notification-body-container">
        <xul:image class="popup-notification-icon"
                   xbl:inherits="popupid,src=icon,class=iconclass"/>
        <xul:vbox flex="1" pack="start"
                  class="popup-notification-body" xbl:inherits="popupid">
          <xul:hbox align="start">
            <xul:vbox flex="1">
              <xul:label class="popup-notification-origin header"
                         xbl:inherits="value=origin,tooltiptext=origin"
                         crop="center"/>
              <!-- These need to be on the same line to avoid creating
                   whitespace between them (whitespace is added in the
                   localization file, if necessary). -->
              <xul:description class="popup-notification-description" xbl:inherits="popupid"><html:span
                xbl:inherits="xbl:text=label,popupid"/><html:b xbl:inherits="xbl:text=name,popupid"/><html:span
              xbl:inherits="xbl:text=endlabel,popupid"/></xul:description>
            </xul:vbox>
            <xul:toolbarbutton anonid="closebutton"
                               class="messageCloseButton close-icon popup-notification-closebutton tabbable"
                               xbl:inherits="oncommand=closebuttoncommand,hidden=closebuttonhidden"
                               tooltiptext="&closeNotification.tooltip;"/>
          </xul:hbox>
          <children includes="popupnotificationcontent"/>
          <xul:label class="text-link popup-notification-learnmore-link"
                     xbl:inherits="onclick=learnmoreclick,href=learnmoreurl">&learnMore;</xul:label>
          <xul:checkbox anonid="checkbox"
                        xbl:inherits="hidden=checkboxhidden,checked=checkboxchecked,label=checkboxlabel,oncommand=checkboxcommand" />
          <xul:description class="popup-notification-warning" xbl:inherits="hidden=warninghidden,xbl:text=warninglabel"/>
        </xul:vbox>
      </xul:hbox>
      <xul:hbox class="popup-notification-footer-container">
        <children includes="popupnotificationfooter"/>
      </xul:hbox>
      <xul:hbox class="popup-notification-button-container">
        <children includes="button"/>
        <xul:button anonid="secondarybutton"
                    class="popup-notification-button"
                    xbl:inherits="oncommand=secondarybuttoncommand,label=secondarybuttonlabel,accesskey=secondarybuttonaccesskey,hidden=secondarybuttonhidden"/>
        <xul:toolbarseparator xbl:inherits="hidden=dropmarkerhidden"/>
        <xul:button anonid="menubutton"
                    type="menu"
                    class="popup-notification-button popup-notification-dropmarker"
                    aria-label="&moreActionsButton.accessibleLabel;"
                    xbl:inherits="onpopupshown=dropmarkerpopupshown,hidden=dropmarkerhidden">
          <xul:menupopup anonid="menupopup"
                         position="after_end"
                         aria-label="&moreActionsButton.accessibleLabel;"
                         xbl:inherits="oncommand=menucommand">
            <children/>
          </xul:menupopup>
        </xul:button>
        <xul:button anonid="button"
                    class="popup-notification-button"
                    default="true"
                    label="&defaultButton.label;"
                    accesskey="&defaultButton.accesskey;"
                    xbl:inherits="oncommand=buttoncommand,label=buttonlabel,accesskey=buttonaccesskey,highlight=buttonhighlight,disabled=mainactiondisabled"/>
      </xul:hbox>
    </content>
    <implementation>
      <field name="checkbox" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "checkbox");
      </field>
      <field name="closebutton" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "closebutton");
      </field>
      <field name="button" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "button");
      </field>
      <field name="secondaryButton" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "secondarybutton");
      </field>
      <field name="menubutton" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "menubutton");
      </field>
      <field name="menupopup" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "menupopup");
      </field>
    </implementation>
  </binding>
</bindings>
