<?xml version="1.0"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html="http://www.w3.org/1999/xhtml">
  <binding id="circular-progress-indicator">
    <resources>
      <stylesheet src="chrome://browser/skin/circularprogress.css"/>
    </resources>

    <content>
      <xul:stack>
        <xul:toolbarbutton anonid="progressButton"
                           class="circularprogressindicator-progressButton"/>
        <html:div anonid="progressTrack"
                  xbl:inherits="progress"
                  class="circularprogressindicator-progressTrack">
        </html:div>
        <html:canvas anonid="progressRing"
                     xbl:inherits="progress"
                     class="circularprogressindicator-progressRing"
                     width="40"
                     height="40">
        </html:canvas>
        <html:div anonid="progressNotification"
                  xbl:inherits="progress"
                  class="circularprogressindicator-progressNotification">
        </html:div>
      </xul:stack>
    </content>

    <implementation>
      <field name="_progressCanvas">
        document.getAnonymousElementByAttribute(this, "anonid", "progressRing");
      </field>
      <field name="_progressNotification">
        document.getAnonymousElementByAttribute(this, "anonid",
            "progressNotification");
      </field>
      <field name="_progressCircleCtx">null</field>
      <field name="_img">null</field>
      <constructor>
        <![CDATA[
          this._progressCircleCtx = this._progressCanvas.getContext('2d');
        ]]>
      </constructor>
      <method name="updateProgress">
        <parameter name="percentComplete"/>
        <body>
          <![CDATA[
            const PROGRESS_RING_IMG = "chrome://browser/skin/images/progresscircle.png";

            // show ring background even if % is 0.
            this.setAttribute("progress", percentComplete);

            let startAngle = 1.5 * Math.PI;
            let endAngle = startAngle + (2 * Math.PI * (percentComplete / 100));

            if (!this._img) {
              this._img = new Image();
              this._img.onload = () => {
                this.updateProgress(this.getAttribute("progress"))
              }
              this._img.src = PROGRESS_RING_IMG;
            }
            else if (this._img.complete) {
              let ctx = this._progressCircleCtx;
              ctx.clearRect(0, 0,
                this._progressCanvas.width, this._progressCanvas.height);

              // Save the state, so we can undo the clipping
              ctx.save();

              ctx.beginPath();
              let center = this._progressCanvas.width / 2;
              ctx.arc(center, center, center, startAngle, endAngle, false);
              ctx.lineTo(center, center);
              ctx.closePath();
              ctx.clip();

              // Draw circle image.
              ctx.translate(center, center);
              ctx.rotate(endAngle);
              ctx.drawImage(this._img, -center, -center);

              ctx.restore();
            } else {
              //  Image is still loading
            }
            return [startAngle, endAngle];
          ]]>
        </body>
      </method>
      <method name="reset">
        <body>
          <![CDATA[
            if(this._img && !this._img.complete) {
              // cancel any pending updateProgress
              this._img.onload = () => {};
            }
            this._progressCircleCtx.clearRect(0, 0,
              this._progressCanvas.width, this._progressCanvas.height);
            this.removeAttribute("progress");
          ]]>
        </body>
      </method>
      <method name="notify">
        <body>
          <![CDATA[
            this.addEventListener("transitionend", this._onNotificationEnd);

            this._progressNotification.classList.add(
                "progressNotification-active");
          ]]>
        </body>
      </method>
      <method name="_onNotificationEnd">
        <body>
          <![CDATA[
            this.removeEventListener("transitionend", this._onNotificationEnd);

            this._progressNotification.classList.remove(
                "progressNotification-active");
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
</bindings>
