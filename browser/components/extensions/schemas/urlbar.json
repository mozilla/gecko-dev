/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

[
  {
    "namespace": "manifest",
    "types": [
      {
        "$extend": "Permission",
        "choices": [
          {
            "type": "string",
            "enum": [
              "urlbar"
            ]
          }
        ]
      }
    ]
  },
  {
    "namespace": "urlbar",
    "description": "Use the <code>browser.urlbar</code> API to experiment with new features in the URLBar. Restricted to Mozilla privileged WebExtensions.",
    "permissions": [
      "urlbar"
    ],
    "types": [
      {
        "id": "Query",
        "type": "object",
        "description": "A query performed in the urlbar.",
        "properties": {
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the query's browser context is private."
          },
          "maxResults": {
            "type": "integer",
            "description": "The maximum number of results shown to the user."
          },
          "searchString": {
            "type": "string",
            "description": "The query's search string."
          },
          "acceptableSources": {
            "type": "array",
            "description": "List of acceptable source types to return.",
            "items": {
              "$ref": "SourceType"
            }
          }
        }
      },
      {
        "id": "Result",
        "type": "object",
        "description": "A result of a query. Queries can have many results. Each result is created by a provider.",
        "properties": {
          "payload": {
            "type": "object",
            "description": "An object with arbitrary properties depending on the result's type."
          },
          "source": {
            "$ref": "SourceType",
            "description": "The result's source."
          },
          "type": {
            "$ref": "ResultType",
            "description": "The result's type."
          },
          "suggestedIndex": {
            "type": "integer",
            "description": "Suggest a preferred position for this result within the result set.",
            "optional": true,
            "default": -1
          }
        }
      },
      {
        "id": "ResultType",
        "type": "string",
        "enum": ["remote_tab", "search", "tab", "tip", "url"],
        "description": "Possible types of results. <code>remote_tab</code>: A synced tab from another device. <code>search</code>: A search suggestion from a search engine. <code>tab</code>: An open tab in the browser. <code>tip</code>: An actionable message to help the user with their query. <code>url</code>: A URL that's not one of the other types."
      },
      {
        "id": "SourceType",
        "type": "string",
        "enum": ["bookmarks", "history", "local", "network", "search", "tabs"],
        "description": "Possible sources of results. <code>bookmarks</code>: The result comes from the user's bookmarks. <code>history</code>: The result comes from the user's history. <code>local</code>: The result comes from some local source not covered by another source type. <code>network</code>: The result comes from some network source not covered by another source type. <code>search</code>: The result comes from a search engine. <code>tabs</code>: The result is an open tab in the browser or a synced tab from another device."
      }
    ],
    "properties": {
      "openViewOnFocus": {
        "$ref": "types.Setting",
        "description": "Enables or disables the open-view-on-focus mode."
      },
      "engagementTelemetry": {
        "$ref": "types.Setting",
        "description": "Enables or disables the engagement telemetry."
      }
    },
    "events": [
      {
        "name": "onBehaviorRequested",
        "type": "function",
        "description": "Before a query starts, this event is fired for the given provider. Its purpose is to request the provider's behavior for the query. The listener should return a behavior in response. By default, providers are inactive, so if your provider should always be inactive, you don't need to listen for this event.",
        "parameters": [
          {
            "name": "query",
            "$ref": "Query",
            "description": "The query for which the behavior is requested."
          }
        ],
        "extraParameters": [
          {
            "name": "providerName",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "description": "The name of the provider whose behavior the listener returns."
          }
        ],
        "returns": {
          "type": "string",
          "enum": ["active", "inactive", "restricting"],
          "description": "The behavior of the provider for the query."
        }
      },
      {
        "name": "onQueryCanceled",
        "type": "function",
        "description": "This event is fired for the given provider when a query is canceled. The listener should stop any ongoing fetch or creation of results and clean up its resources.",
        "parameters": [
          {
            "name": "query",
            "$ref": "Query",
            "description": "The query that was canceled."
          }
        ],
        "extraParameters": [
          {
            "name": "providerName",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "description": "The name of the provider that is creating results for the query."
          }
        ]
      },
      {
        "name": "onResultsRequested",
        "type": "function",
        "description": "When a query starts, this event is fired for the given provider if the provider is active for the query and there are no other providers that are restricting. Its purpose is to request the provider's results for the query. The listener should return a list of results in response.",
        "parameters": [
          {
            "name": "query",
            "$ref": "Query",
            "description": "The query for which results are requested."
          }
        ],
        "extraParameters": [
          {
            "name": "providerName",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "description": "The name of the provider whose results the listener returns."
          }
        ],
        "returns": {
          "type": "array",
          "items": {
            "$ref": "Result"
          },
          "description": "The results that the provider fetched for the query."
        }
      },
      {
        "name": "onResultPicked",
        "type": "function",
        "description": "Typically, a provider includes a <code>url</code> property in its results' payloads. When the user picks a result with a URL, Firefox automatically loads the URL. URLs don't make sense for every result type, however. When the user picks a result without a URL, this event is fired. The provider should take an appropriate action in response. Currently the only applicable <code>ResultType</code> is <code>tip</code>.",
        "parameters": [
          {
            "name": "payload",
            "type": "object",
            "description": "The payload of the result that was picked."
          }
        ],
        "extraParameters": [
          {
            "name": "providerName",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "description": "The listener will be called for the results of the provider with this name."
          }
        ]
      }
    ]
  },
  {
    "namespace": "urlbar.contextualTip",
    "description": "A contextual tip appears in the urlbar's view (its search results panel) and has an icon, text, optional button, and an optional link. Use the <code>browser.urlbar.contextualTip</code> API to experiment with the contextual tip. Restricted to Mozilla privileged WebExtensions.",
    "types": [
      {
        "id": "ContextualTip",
        "type": "object",
        "description": "An object containing the path to an icon, the title, button title, and link title to set on the contextual tip.",
        "properties": {
          "icon": {
            "type": "object",
            "optional": true,
            "description": "Specifies the default icon and theme icons",
            "properties": {
              "defaultIcon": {
                "choices": [
                  {
                    "type": "string",
                    "description": "A URL to an image (e.g. favicon's URL)"
                  },
                  {
                    "$ref": "manifest.IconPath"
                  }
                ],
                "description": "Specifies the default icon to use in the contextual tip."
              },
              "themeIcons": {
                "type": "array",
                "optional": true,
                "minItems": 1,
                "items": { "$ref": "manifest.ThemeIcons" },
                "description": "Specifies icons to use for dark and light themes. Each item in the array is for a specified icon size."
              }
            }
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "description": "A string to be used as the contextual tip's title."
          },
          "buttonTitle": {
            "type": "string",
            "minLength": 1,
            "description": "A string to be used as the contextual tip's button's title.",
            "optional": true
          },
          "linkTitle": {
            "type": "string",
            "minLength": 1,
            "description": "A string to be used as the contextual tip's link's title.",
            "optional": true
          }
        }
      }
    ],
    "functions": [
      {
        "name": "set",
        "type": "function",
        "description": "Sets the contextual tip in the most recent browser winodw with the given icon, title, button title, and link title. If the urlbar's view is not already open, then it will be opened so the contextual tip will be visible. Note that when the urlbar's view is closed, the contextual tip is hidden and will not appear again. `browser.urlbar.contextualTip.set` must be called each time a contextual tip should appear.",
        "parameters": [
          {
            "name": "details",
            "$ref": "ContextualTip",
            "description": "Specifies the contextual tip's texts."
          }
        ]
      },
      {
        "name": "remove",
        "type": "function",
        "description": "Hides the contextual tip (it will still be in the DOM).",
        "parameters": []
      }
    ],
    "events": [
      {
        "name": "onButtonClicked",
        "type": "function",
        "description": "Fired when the user clicks the contextual tip's button.",
        "parameters": [
          {
            "name": "windowId",
            "type": "integer",
            "description": "The id of the window where the contextual tip's button was clicked."
          }
        ]
      },
      {
        "name": "onLinkClicked",
        "type": "function",
        "description": "Fired when the user clicks the contextual tip's link.",
        "parameters": [
          {
            "name": "windowId",
            "type": "integer",
            "description": "The id of the window where the contextual tip's link was clicked."
          }
        ]
      }
    ]
  }
]
