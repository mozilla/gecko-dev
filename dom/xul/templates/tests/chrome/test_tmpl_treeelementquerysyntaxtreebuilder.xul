<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css" type="text/css"?>

<!--
  tree element - query syntax tree builder
-->

<window title="XUL Template Tests" width="500" height="600"
        onload="test_template();"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>

  <body xmlns="http://www.w3.org/1999/xhtml" style="height: 300px; overflow: auto;"/>

  <data id="output">
    <treecols id="treecols" orient="horizontal">
      <treecol id="treecol" primary="true" label="Name" ordinal="1"/>
      <treecol label="Species" ordinal="3"/>
    </treecols>
    <treechildren>
      <treeitem id="http://www.some-fictitious-zoo.com/birds/emu">
        <treerow>
          <treecell label="Emu"/>
          <treecell step="-6" label="12"/>
          <treecell step="6" label="0"/>
        </treerow>
      </treeitem>
      <treeitem step="1" id="http://www.some-fictitious-zoo.com/birds/archaeopteryx">
        <treerow>
          <treecell label="Archaeopteryx"/>
          <treecell step="-4"/>
          <treecell step="4" label="5"/>
        </treerow>
      </treeitem>
      <treeitem step="-2" id="http://www.some-fictitious-zoo.com/birds/barnowl">
        <treerow>
          <treecell label="Barn Owl"/>
          <treecell label="4"/>
        </treerow>
      </treeitem>
      <treeitem id="http://www.some-fictitious-zoo.com/birds/raven">
        <treerow>
          <treecell step="-7" label="Raven"/>
          <treecell step="7" label="Crow"/>
          <treecell step="-5" label="0"/>
          <treecell step="5" label="2"/>
        </treerow>
      </treeitem>
    </treechildren>
  </data>

<script src="templates_shared.js"/>

<script>
<![CDATA[
SimpleTest.waitForExplicitFinish();

var testid ="tree element - query syntax tree builder";
var queryType = "rdf";
var isTreeBuilder = true;
var needsOpen = false;
var notWorkingYet = false;
var notWorkingYetDynamic = true;
var expectedOutput = document.getElementById("output");

var changes = [
  // step 1
  function(targetds, root) {
    var newnode = RDF.GetResource(ZOO_NS + 'birds/archaeopteryx');
    targetds.Assert(newnode, RDF.GetResource(ZOO_NS + 'rdf#name'),
                    RDF.GetLiteral('Archaeopteryx'), true);
    var container = ContainerUtils.MakeSeq(targetds,
                      RDF.GetResource(ZOO_NS + 'birds'));
    container.InsertElementAt(newnode, '2', true);
  },
  // step 2
  function(targetds, root) {
    var container = ContainerUtils.MakeSeq(targetds,
                      RDF.GetResource(ZOO_NS + 'birds'));
    var removednode = container.RemoveElementAt('3', true);
    targetds.Unassert(removednode, RDF.GetResource(ZOO_NS + 'rdf#name'),
                      RDF.GetLiteral('Barn Owl'), true);
  },
  // step 3
  function(targetds, root) {
    targetds.Assert(RDF.GetResource(ZOO_NS + 'birds/archaeopteryx'),
                    RDF.GetResource(ZOO_NS + 'rdf#species'),
                    RDF.GetLiteral('Archaeopteryx lithographica'), true);
  },
  // step 4
  function(targetds, root) {
    targetds.Assert(RDF.GetResource(ZOO_NS + 'birds/archaeopteryx'),
                    RDF.GetResource(ZOO_NS + 'rdf#specimens'),
                    RDF.GetLiteral('5'), true);
  },
  // step 5
  function(targetds, root) {
    var subject = RDF.GetResource(ZOO_NS + 'birds/raven');
    var predicate = RDF.GetResource(ZOO_NS + 'rdf#specimens');
    var oldval = targetds.GetTarget(subject, predicate, true);
    targetds.Change(RDF.GetResource(ZOO_NS + 'birds/raven'),
                    RDF.GetResource(ZOO_NS + 'rdf#specimens'),
                    oldval, RDF.GetLiteral('2'));
  },
  // step 6
  function(targetds, root) {
    var subject = RDF.GetResource(ZOO_NS + 'birds/emu');
    var predicate = RDF.GetResource(ZOO_NS + 'rdf#specimens');
    var oldval = targetds.GetTarget(subject, predicate, true);
    targetds.Change(RDF.GetResource(ZOO_NS + 'birds/emu'),
                    RDF.GetResource(ZOO_NS + 'rdf#specimens'),
                    oldval, RDF.GetLiteral('0'));
  },
  // step 7
  function(targetds, root) {
    var subject = RDF.GetResource(ZOO_NS + 'birds/raven');
    var predicate = RDF.GetResource(ZOO_NS + 'rdf#name');
    var oldval = targetds.GetTarget(subject, predicate, true);
    targetds.Change(RDF.GetResource(ZOO_NS + 'birds/raven'),
                    RDF.GetResource(ZOO_NS + 'rdf#name'),
                    oldval, RDF.GetLiteral('Crow'));
  }
];
]]>
</script>

<tree xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" hidevscroll="true" hidehscroll="true" datasources="rdf:null" flags="dont-build-content" id="root" ref="http://www.some-fictitious-zoo.com/birds">
<treecols orient="horizontal" id="treecols">
<treecol id="treecol" primary="true" label="Name"/>
<treecol label="Species"/>
</treecols>
<template id="template">
<query>
<content uri="?uri"/>
<member container="?uri" child="?child"/>
<triple subject="?child" predicate="http://www.some-fictitious-zoo.com/rdf#name" object="?name"/>
</query>
<rule>
<bindings>
<binding subject="?child" predicate="http://www.some-fictitious-zoo.com/rdf#specimens" object="?specimens"/>
</bindings>
<action>
<treechildren>
<treeitem uri="?child">
<treerow>
<treecell label="?name"/>
<treecell label="?specimens"/>
</treerow>
</treeitem>
</treechildren>
</action>
</rule>
</template>
</tree>

</window>
