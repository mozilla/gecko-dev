/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at <http://mozilla.org/MPL/2.0/>. */

// @flow

import type {
  SourcePacket,
  PausedPacket,
  ThreadFront,
  Actions,
  Target,
  DebuggerClient,
} from "./types";

import { createPause, prepareSourcePayload } from "./create";
import sourceQueue from "../../utils/source-queue";
import { recordEvent } from "../../utils/telemetry";

const CALL_STACK_PAGE_SIZE = 1000;

type Dependencies = {
  threadFront: ThreadFront,
  tabTarget: Target,
  actions: Actions,
  debuggerClient: DebuggerClient,
};

let actions: Actions;
let isInterrupted: boolean;

function addThreadEventListeners(thread: ThreadFront) {
  Object.keys(clientEvents).forEach(eventName => {
    thread.on(eventName, clientEvents[eventName].bind(null, thread));
  });
}

function setupEvents(dependencies: Dependencies) {
  const { tabTarget, threadFront, debuggerClient } = dependencies;
  actions = dependencies.actions;
  sourceQueue.initialize(actions);

  addThreadEventListeners(threadFront);
  tabTarget.on("workerListChanged", () => threadListChanged("worker"));
  debuggerClient.mainRoot.on("processListChanged", () =>
    threadListChanged("contentProcess")
  );
}

async function paused(threadFront: ThreadFront, packet: PausedPacket) {
  // If paused by an explicit interrupt, which are generated by the
  // slow script dialog and internal events such as setting
  // breakpoints, ignore the event.
  const { why } = packet;
  if (why.type === "interrupted" && !packet.why.onNext) {
    isInterrupted = true;
    return;
  }

  let response;
  try {
    // Eagerly fetch the frames
    response = await threadFront.getFrames(0, CALL_STACK_PAGE_SIZE);
  } catch (e) {
    console.log(e);
    return;
  }

  // NOTE: this happens if we fetch frames and then immediately navigate
  if (!response.hasOwnProperty("frames")) {
    return;
  }

  if (why.type != "alreadyPaused") {
    const pause = createPause(threadFront.actor, packet, response);
    await sourceQueue.flush();
    actions.paused(pause);
  }

  recordEvent("pause", { reason: why.type });
}

function resumed(threadFront: ThreadFront) {
  // NOTE: the client suppresses resumed events while interrupted
  // to prevent unintentional behavior.
  // see [client docs](../README.md#interrupted) for more information.
  if (isInterrupted) {
    isInterrupted = false;
    return;
  }

  actions.resumed(threadFront.actorID);
}

function newSource(threadFront: ThreadFront, { source }: SourcePacket) {
  sourceQueue.queue({
    type: "generated",
    data: prepareSourcePayload(threadFront, source),
  });
}

function threadListChanged(type) {
  actions.updateThreads(type);
}

const clientEvents = {
  paused,
  resumed,
  newSource,
};

export { setupEvents, clientEvents, addThreadEventListeners };
