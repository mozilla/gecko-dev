/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: sw=2 ts=2 sts=2 et
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIVariant;

[scriptable, uuid(7d8763ad-79d9-4674-ada1-37fd702af68c)]
interface mozIStorageBindingParams : nsISupports {
  /**
   * Binds aValue to the parameter with the name aName.
   *
   * @param aName
   *        The name of the parameter to bind aValue to.
   * @param aValue
   *        The value to bind.
   */
   void bindByName(in AUTF8String aName,
                   in nsIVariant aValue);
   [noscript] void bindUTF8StringByName(in AUTF8String aName,
                                        in AUTF8String aValue);
   [noscript] void bindStringByName(in AUTF8String aName,
                                    in AString aValue);
   [noscript] void bindDoubleByName(in AUTF8String aName,
                                    in double aValue);
   [noscript] void bindInt32ByName(in AUTF8String aName,
                                   in long aValue);
   [noscript] void bindInt64ByName(in AUTF8String aName,
                                   in long long aValue);
   [noscript] void bindNullByName(in AUTF8String aName);
   void bindBlobByName(in AUTF8String aName,
                       [array, const, size_is(aValueSize)] in octet aValue,
                       in unsigned long aValueSize);
   // The function adopts the storage for the provided blob.  After calling
   // this function, mozStorage will ensure that NS_Free is called on the
   // underlying pointer.
   [noscript]
   void bindAdoptedBlobByName(in AUTF8String aName,
                              [array, size_is(aValueSize)] in octet aValue,
                              in unsigned long aValueSize);

   /**
    * Binds aValue to the parameter with the index aIndex.
    *
    * @param aIndex
    *        The zero-based index of the parameter to bind aValue to.
    * @param aValue
    *        The value to bind.
    */
   void bindByIndex(in unsigned long aIndex,
                    in nsIVariant aValue);
   [noscript] void bindUTF8StringByIndex(in unsigned long aIndex,
                                         in AUTF8String aValue);
   [noscript] void bindStringByIndex(in unsigned long aIndex,
                                     in AString aValue);
   [noscript] void bindDoubleByIndex(in unsigned long aIndex,
                                     in double aValue);
   [noscript] void bindInt32ByIndex(in unsigned long aIndex,
                                    in long aValue);
   [noscript] void bindInt64ByIndex(in unsigned long aIndex,
                                    in long long aValue);
   [noscript] void bindNullByIndex(in unsigned long aIndex);
   void bindBlobByIndex(in unsigned long aIndex,
                        [array, const, size_is(aValueSize)] in octet aValue,
                        in unsigned long aValueSize);
   // The function adopts the storage for the provided blob.  After calling
   // this function, mozStorage will ensure that NS_Free is called on the
   // underlying pointer.
   [noscript]
   void bindAdoptedBlobByIndex(in unsigned long aIndex,
                               [array, size_is(aValueSize)] in octet aValue,
                               in unsigned long aValueSize);
};
