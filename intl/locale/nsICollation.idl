/* -*- Mode: idl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsILocale.idl"

interface nsICollation;

[scriptable, uuid(04971e14-d6b3-4ada-8cbb-c3a13842b349)]
interface nsICollationFactory : nsISupports
{
    /**
     * Create the collation for a given locale.
     *
     * Use NULL as the locale parameter to use the user's locale preference
     * from the operating system.
     *
     * @param locale
     *        The locale for which to create the collation or null to use
     *        user preference.
     * @return A collation for the given locale.
     */
    nsICollation CreateCollation(in nsILocale locale);
};

[scriptable, uuid(b0132cc0-3786-4557-9874-910d7def5f93)]
interface nsICollation : nsISupports {

  // use the primary comparison for the given locale - no flags
  const long kCollationStrengthDefault = 0;

  // do not consider case differences when doing the comparison i.e. A=a) 
  const long kCollationCaseInsensitiveAscii = 1;

  // do not consider accent differences when doing the comparison a=รก) 
  const long kCollationAccentInsenstive = 2;

  // case sensitive collation (default)
  const long kCollationCaseSensitive = kCollationStrengthDefault;

  // case insensitive collation
  const long kCollationCaseInSensitive = (kCollationCaseInsensitiveAscii | kCollationAccentInsenstive);

  // init this interface to a specified locale (should only be called by collation factory)
  void initialize(in nsILocale locale);

  // compare two strings
  // result is same as strcmp
  long compareString(in long strength, in AString string1, in AString string2);

  // allocate sort key from input string
  // returns newly allocated key, and its band its byte length
  [noscript] void allocateRawSortKey(in long strength, 
                                     in AString stringIn,
                                     [array,size_is(outLen)] out octet key,
                                     out unsigned long outLen);

  // compare two sort keys
  // length is a byte length, result is same as strcmp
  [noscript] long compareRawSortKey([const,array,size_is(len1)] in octet key1, in unsigned long len1,
                                    [const,array,size_is(len2)] in octet key2, in unsigned long len2);

};
