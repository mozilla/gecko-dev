/* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include LayersSurfaces;
include LayersMessages;
include protocol PCompositable;
include protocol PImageContainer;
include protocol PLayer;
include protocol PTexture;
include ProtocolTypes;
include protocol PMediaSystemResourceManager;

include "mozilla/GfxMessageUtils.h";

using struct mozilla::layers::TextureInfo from "mozilla/layers/CompositorTypes.h";
using mozilla::layers::TextureFlags from "mozilla/layers/CompositorTypes.h";

using PlatformThreadId from "base/platform_thread.h";

namespace mozilla {
namespace layers {

/**
 * The PImageBridge protocol is used to allow isolated threads or processes to push
 * frames directly to the compositor thread/process without relying on the main thread
 * which might be too busy dealing with content script.
 */
sync protocol PImageBridge
{
  manages PCompositable;
  manages PTexture;
  manages PMediaSystemResourceManager;
  manages PImageContainer;

child:
  async ParentAsyncMessages(AsyncParentMessageData[] aMessages);

  async DidComposite(ImageCompositeNotification[] aNotifications);

parent:
  async ImageBridgeThreadId(PlatformThreadId aTreahdId);

  sync Update(CompositableOperation[] ops, OpDestroy[] toDestroy, uint64_t fwdTransactionId)
    returns (EditReply[] reply);

  async UpdateNoSwap(CompositableOperation[] ops, OpDestroy[] toDestroy, uint64_t fwdTransactionId);

  // First step of the destruction sequence. This puts ImageBridge
  // in a state in which it can't send asynchronous messages
  // so as to not race with the channel getting closed.
  // In the child side, the Closing the channel does not happen right after WillClose,
  // it is scheduled in the ImageBridgeChild's message queue in order to ensure
  // that all of the messages from the parent side have been received and processed
  // before sending closing the channel.
  sync WillClose();

  sync PCompositable(TextureInfo aInfo,
                     nullable PImageContainer aImageContainer) returns (uint64_t id);
  async PTexture(SurfaceDescriptor aSharedData, LayersBackend aBackend, TextureFlags aTextureFlags, uint64_t aSerial);
  async PMediaSystemResourceManager();
  async PImageContainer();

};


} // namespace
} // namespace

