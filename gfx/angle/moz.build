
# Please note this file is autogenerated from generate_mozbuild.py, so do not modify it directly

UNIFIED_SOURCES += [
    'src/common/angleutils.cpp',
    'src/common/blocklayout.cpp',
    'src/common/debug.cpp',
    'src/common/event_tracer.cpp',
    'src/common/mathutil.cpp',
    'src/common/RefCountObject.cpp',
    'src/common/tls.cpp',
    'src/common/utilities.cpp',
    'src/compiler/preprocessor/DiagnosticsBase.cpp',
    'src/compiler/preprocessor/DirectiveHandlerBase.cpp',
    'src/compiler/preprocessor/DirectiveParser.cpp',
    'src/compiler/preprocessor/ExpressionParser.cpp',
    'src/compiler/preprocessor/Input.cpp',
    'src/compiler/preprocessor/Lexer.cpp',
    'src/compiler/preprocessor/Macro.cpp',
    'src/compiler/preprocessor/MacroExpander.cpp',
    'src/compiler/preprocessor/Preprocessor.cpp',
    'src/compiler/preprocessor/Token.cpp',
    'src/compiler/preprocessor/Tokenizer.cpp',
    'src/compiler/translator/BuiltInFunctionEmulator.cpp',
    'src/compiler/translator/CodeGen.cpp',
    'src/compiler/translator/Compiler.cpp',
    'src/compiler/translator/compilerdebug.cpp',
    'src/compiler/translator/depgraph/DependencyGraph.cpp',
    'src/compiler/translator/depgraph/DependencyGraphBuilder.cpp',
    'src/compiler/translator/depgraph/DependencyGraphOutput.cpp',
    'src/compiler/translator/depgraph/DependencyGraphTraverse.cpp',
    'src/compiler/translator/DetectCallDepth.cpp',
    'src/compiler/translator/DetectDiscontinuity.cpp',
    'src/compiler/translator/Diagnostics.cpp',
    'src/compiler/translator/DirectiveHandler.cpp',
    'src/compiler/translator/FlagStd140Structs.cpp',
    'src/compiler/translator/ForLoopUnroll.cpp',
    'src/compiler/translator/InfoSink.cpp',
    'src/compiler/translator/Initialize.cpp',
    'src/compiler/translator/InitializeDll.cpp',
    'src/compiler/translator/InitializeParseContext.cpp',
    'src/compiler/translator/InitializeVariables.cpp',
    'src/compiler/translator/Intermediate.cpp',
    'src/compiler/translator/IntermNode.cpp',
    'src/compiler/translator/intermOut.cpp',
    'src/compiler/translator/IntermTraverse.cpp',
    'src/compiler/translator/LoopInfo.cpp',
    'src/compiler/translator/OutputESSL.cpp',
    'src/compiler/translator/OutputGLSL.cpp',
    'src/compiler/translator/OutputGLSLBase.cpp',
    'src/compiler/translator/OutputHLSL.cpp',
    'src/compiler/translator/parseConst.cpp',
    'src/compiler/translator/ParseContext.cpp',
    'src/compiler/translator/PoolAlloc.cpp',
    'src/compiler/translator/QualifierAlive.cpp',
    'src/compiler/translator/RegenerateStructNames.cpp',
    'src/compiler/translator/RemoveTree.cpp',
    'src/compiler/translator/RewriteElseBlocks.cpp',
    'src/compiler/translator/ScalarizeVecAndMatConstructorArgs.cpp',
    'src/compiler/translator/SearchSymbol.cpp',
    'src/compiler/translator/ShaderLang.cpp',
    'src/compiler/translator/ShaderVars.cpp',
    'src/compiler/translator/StructureHLSL.cpp',
    'src/compiler/translator/SymbolTable.cpp',
    'src/compiler/translator/timing/RestrictFragmentShaderTiming.cpp',
    'src/compiler/translator/timing/RestrictVertexShaderTiming.cpp',
    'src/compiler/translator/TranslatorESSL.cpp',
    'src/compiler/translator/TranslatorGLSL.cpp',
    'src/compiler/translator/TranslatorHLSL.cpp',
    'src/compiler/translator/Types.cpp',
    'src/compiler/translator/UnfoldShortCircuit.cpp',
    'src/compiler/translator/UnfoldShortCircuitAST.cpp',
    'src/compiler/translator/UniformHLSL.cpp',
    'src/compiler/translator/util.cpp',
    'src/compiler/translator/UtilsHLSL.cpp',
    'src/compiler/translator/ValidateLimitations.cpp',
    'src/compiler/translator/ValidateOutputs.cpp',
    'src/compiler/translator/VariableInfo.cpp',
    'src/compiler/translator/VariablePacker.cpp',
    'src/compiler/translator/VersionGLSL.cpp',
    'src/third_party/compiler/ArrayBoundsClamper.cpp',
]
SOURCES += [
    'src/compiler/translator/glslang_lex.cpp',
    'src/compiler/translator/glslang_tab.cpp',
]


if CONFIG['GNU_CXX']:
    CXXFLAGS += [
        '-Wno-attributes',
        '-Wno-sign-compare',
        '-Wno-unknown-pragmas',
    ]
    if CONFIG['CLANG_CXX']:
        CXXFLAGS += ['-Wno-unused-private-field']

if CONFIG['MOZ_DIRECTX_SDK_PATH'] and not CONFIG['MOZ_HAS_WINSDK_WITH_D3D']:
    CXXFLAGS += ['-I\'%s/include/\'' % CONFIG['MOZ_DIRECTX_SDK_PATH']]

DEFINES['NOMINMAX'] = True
DEFINES['_CRT_SECURE_NO_DEPRECATE'] = True
DEFINES['_HAS_EXCEPTIONS'] = 0

if not CONFIG['MOZ_DEBUG']:
    DEFINES['_SECURE_SCL'] = 0

DEFINES['ANGLE_ENABLE_D3D9'] = True
if CONFIG['MOZ_HAS_WINSDK_WITH_D3D']:
    DEFINES['ANGLE_ENABLE_D3D11'] = True

DEFINES['ANGLE_COMPILE_OPTIMIZATION_LEVEL'] = 'D3DCOMPILE_OPTIMIZATION_LEVEL1'
DEFINES['ANGLE_NO_EXCEPTIONS'] = True

# We need these defined to nothing so that we don't get bogus dllimport declspecs
DEFINES['GL_APICALL'] = ""
DEFINES['GL_GLEXT_PROTOTYPES'] = ""
DEFINES['EGLAPI'] = ""


# Only build libEGL/libGLESv2 on Windows
if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
    DIRS += [ 'src/libGLESv2', 'src/libEGL' ]

EXPORTS.angle += [ 'include/GLSLANG/ShaderLang.h', 'include/GLSLANG/ShaderVars.h' ]
EXPORTS.angle.KHR += [ 'include/KHR/khrplatform.h' ]

LOCAL_INCLUDES += [ 'include', 'src' ]

if CONFIG['GKMEDIAS_SHARED_LIBRARY']:
    NO_VISIBILITY_FLAGS = True

# This tells ANGLE to build the translator with declspec(dllexport) on Windows
# which we need to get these symbols exported from gkmedias
DEFINES['COMPONENT_BUILD'] = True
DEFINES['ANGLE_TRANSLATOR_IMPLEMENTATION'] = True

FINAL_LIBRARY = 'gkmedias'
